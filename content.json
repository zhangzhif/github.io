[{"title":"ArrayList源码解析","url":"/2019/12/01/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/","content":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p>  <em>实现了三个标记接口: RandomAccess, Cloneable, java.io.Serializable</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"RandomAccess\"><a href=\"#RandomAccess\" class=\"headerlink\" title=\"RandomAccess\"></a>RandomAccess</h3><p>   <em>支持随机访问（基于下标）,为了能够更好地判断集合是ArrayList还是LinkedList，从而能够更好选择更优的遍历方式，提高性能！</em></p>\n<h3 id=\"Cloneable\"><a href=\"#Cloneable\" class=\"headerlink\" title=\"Cloneable\"></a>Cloneable</h3><p>   <em>支持拷贝：实现Cloneable接口，重写clone方法、方法内容默认调用父类的clone方法。</em></p>\n<ol>\n<li>浅拷贝<br><em>对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝</em></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">               Study study = (Study) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">               <span class=\"keyword\">return</span> study;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<ol start=\"2\">\n<li>深拷贝<br><em>对基本数据类型进行值传递，对引用数据类型创建一个新的对象，并复制内容，这是深拷贝</em></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">    Study s = (Study) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    s.setScore(<span class=\"keyword\">this</span>.score.clone());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <em>java的传参有基本类型和引用类型传参,参数传递时拷贝的都是栈中的内容。此处大概分为三种情况</em></p>\n<ol>\n<li>基本类型,存储在栈中所以拷贝的就是真实的值，修改后不影响原值</li>\n<li>引用类型:栈中内容为对象引用,拷贝的也为引用 修改改变的是引用所指向的对象,由于引用的同一个对象，所以元对象改变了</li>\n<li>String:虽然String也是引用类型 但于String是不可变对象 在修改时会讲引用指向一个新的对象，所已他们的引用变得不同了，当然不会改变原值</li>\n</ol>\n<h3 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h3><p><em>序列化：将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据，在Java中的这个Serializable接口其实是给jvm看的，通知jvm，我不对这个类做序列化了，你(jvm)帮我序列化就好了。如果我们没有自己声明一个serialVersionUID变量,接口会默认生成一个serialVersionUID，默认的serialVersinUID对于class的细节非常敏感，反序列化时可能会导致InvalidClassException这个异常（每次序列化都会重新计算该值）</em></p>\n<h3 id=\"AbstractList\"><a href=\"#AbstractList\" class=\"headerlink\" title=\"AbstractList\"></a>AbstractList</h3><p><em>继承了AbstractList ，说明它是一个列表，拥有相应的增，删，查，改等功能。</em></p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>为什么继承了 AbstractList 还需要 实现List 接口？</p>\n<p><em>1、在StackOverFlow 中：传送门 得票最高的答案的回答者说他问了当初写这段代码的 Josh Bloch，得知这就是一个写法错误。<br> I’ve asked Josh Bloch, and he informs me that it was a mistake. He used to think, long ago, that there was some value in it,<br> but he since “saw the light”. Clearly JDK maintainers haven’t considered this to be worth backing out later.</em></p>\n<h2 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 序列化版本号（类文件签名），如果不写会默认生成</span></span><br><span class=\"line\"><span class=\"comment\"> * 类内容的改变会影响签名变化，导致反序列化失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8683452581122892189L</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果实例化时未指定容量，则在初次添加元素时会进行扩容使用此容量作为数组长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * static修饰，所有的未指定容量的实例(也未添加元素)共享此数组</span></span><br><span class=\"line\"><span class=\"comment\"> * 两个空的数组有什么区别呢？</span></span><br><span class=\"line\"><span class=\"comment\"> * 就是第一次添加元素时知道该 elementData 从空的构造函数还是有参构造函数被初始化的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 以便确认如何扩容。空的构造器则初始化为10，有参构造器则按照扩容因子扩容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * arrayList真正存放元素的地方，长度大于等于size</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * arrayList中的元素个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 无参构造器，构造一个容量大小为 10 的空的 list 集，</span></span><br><span class=\"line\"><span class=\"comment\"> * 但构造函数只是给 elementData 赋值了一个空的数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 是在第一次添加元素时容量扩大至 10 的。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当使用无参构造函数时是把DEFAULTCAPACITY_EMPTY_ELEMENTDATA 赋值给 elementData。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当initialCapacity 为零时则是把 EMPTY_ELEMENTDATA 赋值给 elementData。 </span></span><br><span class=\"line\"><span class=\"comment\"> * 当initialCapacity大于零初始化一个大小为initialCapacity的object数组并赋值给elementData。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> initialCapacity 初始大小</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+ initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将 Collection 转化为数组，数组长度赋值给 size。 </span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 size 不为零，则判断 elementData 的 class 类型是否为 ArrayList，不是的话则做一次转换。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 size 为零，则把 EMPTY_ELEMENTDATA 赋值给 elementData，相当于new ArrayList(0)。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> c </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((size = a.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.getClass() == ArrayList<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">            elementData = a;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            elementData = Arrays.copyOf(a, size, Object[]<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 指向空数组</span></span><br><span class=\"line\">        elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h2><h3 id=\"尾部插入-默认\"><a href=\"#尾部插入-默认\" class=\"headerlink\" title=\"尾部插入(默认)\"></a>尾部插入(默认)</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次添加元素到集合中时都会先确认下集合容量大小。然后将 size 自增 1赋值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断如果 elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class=\"line\"><span class=\"comment\"> * 就取 DEFAULT_CAPACITY 和 minCapacity 的最大值也就是 10。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这就是 EMPTY_ELEMENTDATA 与DEFAULTCAPACITY_EMPTY_ELEMENTDATA 的区别所在。</span></span><br><span class=\"line\"><span class=\"comment\"> * 同时也验证了上面的说法：使用无参构造函数时是在第一次添加元素时初始化容量为 10 的</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对modCount自增1,记录操作次数,如果minCapacity大于elementData的长度,则对集合进行扩容,</span></span><br><span class=\"line\"><span class=\"comment\"> * 第一次添加元素时 elementData 的长度为零</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>插入性能与linkedList对比</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> jdk8.list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * arrayList 提前指定容量大小 插入性能对比linkedList</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhangzhifeng </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EffectTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不指定下标插入</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = <span class=\"number\">10000000</span>;</span><br><span class=\"line\">        <span class=\"comment\">//指定容量时</span></span><br><span class=\"line\">        List arrayList = <span class=\"keyword\">new</span> ArrayList(length);</span><br><span class=\"line\"></span><br><span class=\"line\">        List linkedList = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start5 = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt;length;i++)&#123;</span><br><span class=\"line\">            arrayList.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end5 = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"arrayList:\"</span>+(end5-start5));</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start6 = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt;length;i++)&#123;</span><br><span class=\"line\">            linkedList.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end6 = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"linkedList:\"</span>+(end6-start6));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//结果</span></span><br><span class=\"line\">    <span class=\"comment\">//arrayList:1876</span></span><br><span class=\"line\">    <span class=\"comment\">//linkedList:8040</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>arrayList涉及扩容，会消耗性能但是如果提前指定容量，会提升性能，可以达到与linkedList相当，甚至超越</strong></p>\n<hr>\n<h3 id=\"指定下标插入\"><a href=\"#指定下标插入\" class=\"headerlink\" title=\"指定下标插入\"></a>指定下标插入</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下标越界检查</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同上尾部插入判断扩容,记录操作数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 依次复制插入位置及后面的数组元素，到后面一格，不是移动，</span></span><br><span class=\"line\"><span class=\"comment\">     * 因此复制完后，添加的下标位置和下一个位置指向对同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">            size - index);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 再将元素赋值给该下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>时间复杂度为O(n)，与移动的元素个数正相关</strong></p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 获取当前数组长度</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 默认将扩容至原来容量的 1.5 倍</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果1.5倍太小的话，则将我们所需的容量大小赋值给newCapacity</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                newCapacity = minCapacity;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果1.5倍太大或者我们需要的容量太大，</span></span><br><span class=\"line\"><span class=\"comment\">             * 那就直接拿 newCapacity = (minCapacity &gt; MAX_ARRAY_SIZE) ?</span></span><br><span class=\"line\"><span class=\"comment\">             * Integer.MAX_VALUE : MAX_ARRAY_SIZE 来扩容</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 然后将原数组中的数据复制到大小为 newCapacity 的新数组中，并将新数组赋值给 elementData。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 需要的长度溢出 抛OOM异常</span></span><br><span class=\"line\"><span class=\"comment\">         * 大于数组长度最大值直接取Integer.max</span></span><br><span class=\"line\"><span class=\"comment\">         * 否则拿最大长度MAX_ARRAY_SIZE</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">                    Integer.MAX_VALUE :</span><br><span class=\"line\">                    MAX_ARRAY_SIZE;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 检查 index 是否合法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 操作数+1</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 判断要删除的元素是否是最后一个位</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果 index 不是最后一个，就从 index + 1 开始往后所有的元素都向前拷贝一份。</span></span><br><span class=\"line\"><span class=\"comment\">         * 然后将数组的最后一个位置空,如果 index 是最后一个元素那么就直接将数组的最后一个位置空</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 让指针最后指向空，进行gc</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当我们调用 remove(Object o) 时，会把 o 分为是否为空来分别处理。</span></span><br><span class=\"line\"><span class=\"comment\">     * 对数组做遍历，找到第一个与 o 对应的下标 index</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用 fastRemove 方法，删除下标为 index 的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    fastRemove(index);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (o.equals(elementData[index])) &#123;</span><br><span class=\"line\">                    fastRemove(index);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fastRemove(int index) 方法和 remove(int index) 方法基本全部相同。</span></span><br><span class=\"line\"><span class=\"comment\">     * 它不用校验index的合法性和记录删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,numMoved);</span><br><span class=\"line\">        elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代器-iterator\"><a href=\"#迭代器-iterator\" class=\"headerlink\" title=\"迭代器 iterator\"></a>迭代器 iterator</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ArrayList 内部类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代表下一个要访问的元素下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cursor;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代表上一个要访问的元素下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代表对 ArrayList 修改次数的期望值，初始值为 modCount</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果下一个元素的下标等于集合的大小 ，就证明到最后了</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//判断expectedModCount和modCount是否相等,ConcurrentModificationException</span></span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">        <span class=\"comment\">//对 cursor 进行判断，看是否超过集合大小和数组长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        <span class=\"comment\">// 自增 1。开始时，cursor = 0，lastRet = -1；每调用一次next方法，cursor和lastRet都会自增1。</span></span><br><span class=\"line\">        cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//将cursor赋值给lastRet，并返回下标为 lastRet 的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断 lastRet 的值是否小于 0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">        <span class=\"comment\">//判断expectedModCount和modCount是否相等,ConcurrentModificationException</span></span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//直接调用 ArrayList 的 remove 方法删除下标为 lastRet 的元素</span></span><br><span class=\"line\">            ArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</span><br><span class=\"line\">            <span class=\"comment\">//将 lastRet 赋值给 curso</span></span><br><span class=\"line\">            cursor = lastRet;</span><br><span class=\"line\">            <span class=\"comment\">//将 lastRet 重新赋值为 -1，并将 modCount 重新赋值给 expectedModCount。</span></span><br><span class=\"line\">            lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            expectedModCount = modCount;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>remove 方法的弊端。<br> 1、只能进行remove操作，add、clear 等 Itr 中没有。<br> 2、调用 remove 之前必须先调用 next。因为 remove 开始就对 lastRet 做了校验。而 lastRet 初始化时为 -1。<br> 3、next 之后只可以调用一次 remove。因为 remove 会将 lastRet 重新初始化为 -1</em></p>\n<h2 id=\"fail-fast\"><a href=\"#fail-fast\" class=\"headerlink\" title=\"fail-fast\"></a>fail-fast</h2><p><em>fail-fast机制是java集合中的一种错误机制。当使用迭代器迭代时，如果发现集合有修改，则快速失败做出响应，抛出ConcurrentModificationException异常。这种修改有可能是其它线程的修改，也有可能是当前线程自己的修改导致的，比如迭代的过程中直接调用remove()删除元素等。另外，并不是java中所有的集合都有fail-fast的机制。比如，像最终一致性的ConcurrentHashMap、CopyOnWriterArrayList等都是没有fast-fail的。<br> fail-fast是怎么实现的：<br> ArrayList、HashMap中都有一个属性叫modCount，每次对集合的修改这个值都会加1，在遍历前记录这个值到expectedModCount中，遍历中检查两者是否一致，如果出现不一致就说明有修改，则抛出ConcurrentModificationException异常。<br> 底层数组存/取元素效率非常的高(get/set)，时间复杂度是O(1)，而查找（比如：indexOf，contain），插入和删除元素效率不太高，时间复杂度为O(n)。<br> 插入/删除元素会触发底层数组频繁拷贝，效率不高，还会造成内存空间的浪费，解决方案：linkedList<br> 查找元素效率不高，解决方案：HashMap（红黑树）</em></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>创建时指定最好初始长度,减少扩容次数提升效率</p>\n</li>\n<li><p>arrayList.subList(beginIndex,endIndex) 返回其内部类 通过指定偏移量操作原对象。（源对象不可变此处有fast-fail检查）</p>\n</li>\n<li><p>属性 modCount 每次添加删除元素 +1 fast-fail 检查</p>\n</li>\n<li><p>List unmodifiableList = Collections.unmodifiableList(list); 不可变list 原对象可变   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造器  </span></span><br><span class=\"line\">UnmodifiableList(List&lt;? extends E&gt; list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(list);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//get 操作的原对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;<span class=\"keyword\">return</span> list.get(index);&#125;</span><br><span class=\"line\"><span class=\"comment\">//变更操作直接抛异常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Arrays.asList(T..) 返回的是Arrays内部类。若传入的数组为基本类型,返回的list长度一直为1。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Integer[] array = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">List list = Arrays.asList(array);</span><br><span class=\"line\"><span class=\"comment\">//list.size() = 3</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">List list1 = Arrays.asList(array1);</span><br><span class=\"line\"><span class=\"comment\">// list.size() = 1</span></span><br><span class=\"line\"><span class=\"comment\">//基本类型不支持范型，此处会变成int[1][]</span></span><br><span class=\"line\"><span class=\"comment\">// debug 自测</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>List的最大长度为什么为 Integer.max-8</p>\n</li>\n</ol>\n","categories":["java"],"tags":["javase"]},{"title":"大家好～","url":"/2019/03/02/introduce/","content":"<p>我就是江湖上人见人爱、花见花开、车见车载，人称上天入地、无所不能、英俊潇洒、风流倜傥、玉树临风、学富五车、高大威猛、阅代码无数、迷倒万千少女,号称一朵梨花压海棠的java程序猿，帅到掉榨!。来和我一起学习吧。</p>\n<h2 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h2><h3 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h3><h4 id=\"JVM线程模型\"><a href=\"#JVM线程模型\" class=\"headerlink\" title=\"JVM线程模型\"></a><a href=\"#/\">JVM线程模型</a></h4><h4 id=\"垃圾回收器\"><a href=\"#垃圾回收器\" class=\"headerlink\" title=\"垃圾回收器\"></a>垃圾回收器</h4><h4 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h4><h4 id=\"JVM类加载机制\"><a href=\"#JVM类加载机制\" class=\"headerlink\" title=\"JVM类加载机制\"></a>JVM类加载机制</h4><h4 id=\"JVM调优工具\"><a href=\"#JVM调优工具\" class=\"headerlink\" title=\"JVM调优工具\"></a>JVM调优工具</h4><h4 id=\"GC日志分析\"><a href=\"#GC日志分析\" class=\"headerlink\" title=\"GC日志分析\"></a>GC日志分析</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">学习使我快乐</span><br></pre></td></tr></table></figure>\n\n\n\n","tags":["随笔"]},{"title":"JVM虚拟机","url":"/2020/03/15/jvm/","content":"<p>java虚拟机(java virtual machine，JVM)，一种能够运行java字节码的虚拟机。作为一种编程语言的虚拟机，实际上不只是专用于Java语言，只要生成的编译文件匹配JVM对加载编译文件格式要求，任何语言都可以由JVM编译运行。比如kotlin、scala等。</p>\n<h2 id=\"JVM组成\"><a href=\"#JVM组成\" class=\"headerlink\" title=\"JVM组成\"></a>JVM组成</h2><p>JVM的主要由三部分组成</p>\n<ul>\n<li>类加载子系统</li>\n<li>运行时数据区（内存结构）</li>\n<li>执行引擎<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/jvm.jpg\" alt=\"jvm结构\" title>\n                </div>\n                <div class=\"image-caption\">jvm结构</div>\n            </figure>\n\n\n\n\n</li>\n</ul>\n<h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/lifecircle.jpg\" alt=\"生命周期\" title>\n                </div>\n                <div class=\"image-caption\">生命周期</div>\n            </figure>\n<ol>\n<li>加载<br> <em>将class文件读取到内存</em></li>\n<li>连接<br> 2.1 验证<br> <em>验证字节码文件的正确性</em><br> 2.2  准备<br> <em>给类的静态变量分配内存，并赋予默认值</em><br> 2.3 解析<br> <em>类装载器装入类所引用的其它所有类</em></li>\n<li>初始化<br> <em>为类的静态变量赋予正确的初始值，上述的准备阶段为静态变量赋予的是虚拟机默认的初始值，此处赋予的才是程序编写者为变量分配的真正的初始值，执行静态代码块</em></li>\n<li>使用</li>\n<li>卸载</li>\n</ol>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><ul>\n<li>启动类加载器(Bootstrap ClassLoader)<br>  <em>负责加载JRE的核心类库，如JRE目标下的rt.jar，charsets.jar等</em></li>\n<li>扩展类加载器(Extension ClassLoader)<br>  <em>负责加载JRE扩展目录ext中jar类包</em></li>\n<li>系统类加载器(Application ClassLoader)<br>  <em>负责加载ClassPath路径下的类包</em></li>\n<li>用户自定义加载器(User ClassLoader)<br>  <em>负责加载用户自定义路径下的类包</em><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/classLoader.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n\n</li>\n</ul>\n<h2 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h2><ol>\n<li>全盘负责委托机制<br> <em>当一个ClassLoader加载一个类的时候，除非显示的使用另一个ClassLoader，该类所依赖和引用的类也由这个ClassLoader载入</em></li>\n<li>双亲委派机制<br> <em>指先委托父类加载器寻找目标类，在找不到的情况下才会到自己的路径中查找并载入目标类</em><br>双亲委派的优势<ul>\n<li><em>沙箱安全机制：比如自己写的String.class类不会被加载，这样可以防止核心库被随意篡改</em></li>\n<li><em>避免类的重复加载：当父ClassLoader已经加载了该类的时候，就不需要子ClassLoader再加载一次</em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h2><ol>\n<li><p>方法区（Method Area）<br> <em>类的所有字段和方法字节码，以及一些特殊方法如构造函数，接口代码也在这里定义。简单来说，所有定义的方法的信息都保存在该区域，静态变量+常量+类信息（构造方法/接口定义）+运行时常量池都存在方法区中，虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是为了和Java的堆区分开(jdk1.8以前hotspot虚拟机叫永久代、持久代，jdk1.8时叫元空间)</em></p>\n</li>\n<li><p>堆（Heap）<br> <em>虚拟机启动时自动分配创建，用于存放对象的实例，几乎所有对象都在堆上分配内存，当对象无法在该空间申请到内存是将抛出OutOfMemoryError异常。同时也是垃圾收集器管理的主要区域。</em></p>\n<p> 2.1 新生代<br> <em>类出生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。新生代分为两部分：伊甸区（Eden space）和幸存者区（Survivor space），所有的类都是在伊甸区被new出来的。幸存区又分为From和To区。当Eden区的空间用完是，程序又需要创建对象，JVM的垃圾回收器将Eden区进行垃圾回收（Minor GC），将Eden区中的不再被其它对象应用的对象进行销毁。然后将Eden区中剩余的对象移到From Survivor区。若From Survivor区也满了，再对该区进行垃圾回收，然后移动到To Survivor区。</em><br> 2.2 老年代<br> <em>新生代经过多次GC仍然存货的对象移动到老年区。若老年代也满了，这时候将发生Major GC（也可以叫Full GC），进行老年区的内存清理。若老年区执行了Full GC之后发现依然无法进行对象的保存，就会抛出OOM（OutOfMemoryError）异常</em><br> 2.3 元空间<br> <em>在JDK1.8之后，元空间替代了永久代，它是对JVM规范中方法区的实现，区别在于元数据区不在虚拟机当中，而是用的本地内存，永久代在虚拟机当中，永久代逻辑结构上也属于堆，但是物理上不属于。</em></p>\n</li>\n<li><p>栈 (Stack)<br> <em>Java线程执行方法的内存模型，一个线程对应一个栈，每个方法在执行的同时都会创建一个栈帧（用于存储局部变量表，操作数栈，动态链接，方法出口等信息）不存在垃圾回收问题，只要线程一结束该栈就释放，生命周期和线程一致</em></p>\n</li>\n<li><p>本地方法栈 (Native Method Stack)<br> <em>类似栈，java栈服务于java方法，而本地方法栈服务于native方法。</em></p>\n</li>\n<li><p>程序计数器 (Program Counter Register)<br> <em>就是一个指针，指向下一跳指令的地址，就是即将要执行的指令，由执行引擎进行读取，所占的内存空间很小，几乎可以忽略不计</em></p>\n</li>\n</ol>\n","categories":["java"],"tags":["jvm"]},{"title":"synchronized锁状态及性能对比","url":"/2020/04/01/synchronized/","content":"<h2 id=\"锁状态\"><a href=\"#锁状态\" class=\"headerlink\" title=\"锁状态\"></a>锁状态</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>无锁<br> <em>没有synchronized关键字修饰</em></li>\n<li>偏向锁<br>  <em>JVM开启偏向锁时只有单个线程调用同步代码（不存在竞争条件）且无法重新偏向（单个锁情况，不考虑批量重偏向^[t1线程实例化同一个类多个对象并加锁，t2线程也对其加锁 由于锁升级会进行多次锁撤销操作，JVM会认为接下来的对象需要批量重偏向而不是进行锁升级为轻量级]</em></li>\n<li>轻量级锁<br>  <em>多个线程调用同步代码，但是线程之间交替执行例如调用join().-自旋锁也是产生轻量级锁的一个方式</em></li>\n<li>重量级锁<br>  <em>多个线程调用同步代码，且存在锁竞争</em></li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><h4 id=\"对象头介绍\"><a href=\"#对象头介绍\" class=\"headerlink\" title=\"对象头介绍\"></a>对象头介绍</h4><p>   <em>锁状态的标记就在对象头当中。网上32位操作系统对象头的文档很多，下面使用的是64位操作系统介绍</em></p>\n<h5 id=\"对象头的组成-mark-Word\"><a href=\"#对象头的组成-mark-Word\" class=\"headerlink\" title=\"对象头的组成-mark Word\"></a>对象头的组成-mark Word</h5><p><em>这部分主要用来存储对象自身的运行时数据，如hashcode、gc分代年龄等，32位操作系统和64位操作系统的位长度是不一样的，具体看图:</em></p>\n<pre><code>                             32位操作系统\n|------------------------------------------------|-------------------| \n|                  Mark Word (32 bits)           |       State       |\n|------------------------------------------------|-------------------|\n| identity_hashcode:25|age:4|biased_lock:1|lock:2|       Normal      |\n|------------------------------------------------|-------------------|\n| thread:23 | epoch:2|age:4|biased_lock:1 |lock:2|       Biased      |\n|------------------------------------------------|-------------------|\n|           ptr_to_lock_record:30         |lock:2|Lightweight Locked |\n|------------------------------------------------|-------------------|\n|       ptr_to_heavyweight_monitor:30     |lock:2| Heavyweight Locked|\n|------------------------------------------------|-------------------|\n|                                         |lock:2|    Marked for GC  |\n|------------------------------------------------|-------------------|</code></pre><hr>\n<pre><code>                                    64位操作系统   \n|-------------------------------------------------------------------|-------------------|\n|                  Mark Word (64 bits)                              |       State       |\n|-------------------------------------------------------------------|-------------------|\n| unused:25|identity_hashcode:31|unused:1|age:4|biased_lock:1|lock:2|       Normal      |\n|------------------------------------------------------------|------|-------------------|\n| thread:54|     epoch:2        |unused:1|age:4|biased_lock:1|lock:2|       Biased      |\n|------------------------------------------------------------|------|-------------------|\n|                           ptr_to_lock_record:62            |lock:2|Lightweight Locked |\n|----------------------------------------------------------- |------|-------------------|\n|                        ptr_to_heavyweight_monitor:62       |lock:2| Heavyweight Locked|\n|------------------------------------------------------------|------|-------------------|\n|                                                            |lock:2|    Marked for GC  |\n|---------------------------------------------------------------------------------------|</code></pre><h4 id=\"JOL工具\"><a href=\"#JOL工具\" class=\"headerlink\" title=\"JOL工具\"></a>JOL工具</h4><p>   JOL全称为Java Object Layout，是分析JVM中对象布局的工具，该工具大量使用了Unsafe、JVMTI来解码布局情况，分析结果是比较精准。使用时直接引入maven依赖即可</p>\n<pre><code>&lt;!--java状态分析工具--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;\n    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;\n    &lt;version&gt;0.9&lt;/version&gt;\n&lt;/dependency&gt;</code></pre><h4 id=\"偏向锁代码\"><a href=\"#偏向锁代码\" class=\"headerlink\" title=\"偏向锁代码\"></a>偏向锁代码</h4><pre><code>- JVM偏向锁延迟： JVM启动有大量的同步操作，偏向锁的锁消除性能很差所以JVM启动时会延迟偏向锁的启用。\n- 对象进行hashcode以后 就不存在偏向锁 这和对象头的设计有关\n- 偏向锁开启后新建对象 会有一个可偏向状态 但是指向的线程号为空 体现为二机制 0\n\n/**\n * 由于在jvm启动时会延迟开启偏向锁 所以使用Thread.sleep(5000)\n * 设置JVM启动参数 -XX:BiasedLockingStartupDelay=0 延迟偏向锁时间0\n */\npublic class Demo1 {\n    public static void main(String[] args) throws InterruptedException {\n        //睡眠5秒 使得偏向锁开启 也可以设置启动参数 \n        //-XX:BiasedLockingStartupDelay=0 延迟偏向锁时间0\n        Thread.sleep(5000);\n        A a = new A();\n        System.out.println(&quot;锁之前&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n        Thread thread = new Thread(){\n            @Override\n            public void run() {\n                synchronized (a){\n                    System.out.println(&quot;锁状态&quot;);\n                    System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                }\n            }\n        };\n        thread.start();\n        System.out.println(&quot;锁之后&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n    }\n}\n\n\n\n结果\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 d0 11 1b (00000101 11010000 00010001 00011011) (454152197)\n      4     4        (object header)                           e6 7f 00 00 (11100110 01111111 00000000 00000000) (32742)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 d0 11 1b (00000101 11010000 00010001 00011011) (454152197)\n      4     4        (object header)                           e6 7f 00 00 (11100110 01111111 00000000 00000000) (32742)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n结果分别为 101+0 偏向锁状态 101+pid 偏向锁 101+pid偏向锁，后面两次打印结果中可以看到锁指向线程id是相同。 </code></pre><h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><pre><code>public class Demo2 {\n\n    //JVM启动设置关闭偏向锁延迟\n    public static void main(String[] args) throws InterruptedException {\n\n        A a = new A();\n        System.out.println(&quot;锁之前&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n        Thread thread = new Thread(){\n            @Override\n            public void run() {\n                synchronized (a){\n                    System.out.println(&quot;线程锁状态&quot;);\n                    System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                }\n            }\n        };\n\n        /**\n         * 主线程先拿锁 执行完成启动第二个线程 否则会产出重量级锁\n         */\n        synchronized (a){\n            System.out.println(&quot;主线程锁状态&quot;);\n            System.out.println(ClassLayout.parseInstance(a).toPrintable());\n        }\n\n        thread.start();\n\n        System.out.println(&quot;锁之后&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n    }\n}\n\n结果\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n主线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 18 00 7a (00000101 00011000 00000000 01111010) (2046826501)\n      4     4        (object header)                           8d 7f 00 00 (10001101 01111111 00000000 00000000) (32653)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\n线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           f8 c8 12 0f (11111000 11001000 00010010 00001111) (252889336)\n      4     4        (object header)                           00 70 00 00 (00000000 01110000 00000000 00000000) (28672)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           f8 c8 12 0f (11111000 11001000 00010010 00001111) (252889336)\n      4     4        (object header)                           00 70 00 00 (00000000 01110000 00000000 00000000) (28672)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\n结果分别为 101+0 偏向锁状态 101+pid 偏向锁 000 轻量级锁 000 轻量级锁</code></pre><h4 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h4><pre><code>/**\n * 代码与轻量级锁的代码区别为thread.start()方法调用放到主线程加锁之前 使多个线程之间存在锁竞争\n *（自选状态之外）升级重量级锁\n */\n public class Demo3 {\n\n     //JVM启动设置关闭偏向锁延迟\n     public static void main(String[] args) throws InterruptedException {\n\n         A a = new A();\n         System.out.println(&quot;锁之前&quot;);\n         System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n         Thread thread = new Thread(){\n             @Override\n             public void run() {\n                 synchronized (a){\n                     System.out.println(&quot;线程锁状态&quot;);\n                     System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                 }\n             }\n         };\n\n         thread.start();\n         /**\n          * 主线程先拿锁 执行完成启动第二个线程 否则会产出重量级锁\n          */\n         synchronized (a){\n             System.out.println(&quot;主线程锁状态&quot;);\n             System.out.println(ClassLayout.parseInstance(a).toPrintable());\n         }\n\n\n\n         System.out.println(&quot;锁之后&quot;);\n         System.out.println(ClassLayout.parseInstance(a).toPrintable());\n     }\n }\n结果：\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n主线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\n线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\n\n 结果分别为001 无锁 010 重量级锁 010重量级锁 010 重量级锁 （锁只会进行升级和锁释放，不会降级）</code></pre><h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><pre><code>//JVM启动设置关闭偏向锁延迟 -XX:BiasedLockingStartupDelay=0\npublic class Demo4 {\n    public Long max = 1000000000L;\n\n    public static void main(String[] args) throws InterruptedException {\n        Demo4 demo4 = new Demo4();\n        long start = System.currentTimeMillis();\n        while (demo4.max&gt;0){\n            demo4.run1();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(String.format(&quot;%sms&quot;, end -start));\n    }\n    public synchronized void run1(){\n\n       max--;\n    }\n}\n执行结果 4294ms</code></pre><h3 id=\"轻量级锁-1\"><a href=\"#轻量级锁-1\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><pre><code>代码同上 将偏向锁延迟开启即可\n结果  19682ms</code></pre><h3 id=\"重量级锁-1\"><a href=\"#重量级锁-1\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h3><pre><code> public class Demo5 {\n     public CountDownLatch countDownLatch = new CountDownLatch(1000000000);\n     public static void main(String[] args) throws InterruptedException {\n         Demo5 demo4 = new Demo5();\n         long start = System.currentTimeMillis();\n         for (int i=0;i&lt;2;i++){\n             Thread thread = new Thread(){\n                 @Override\n                 public void run() {\n                     while (demo4.countDownLatch.getCount()&gt;0){\n                         demo4.run1();\n                     }\n                 };\n             };\n             thread.start();\n         }\n         demo4.countDownLatch.await();\n         long end = System.currentTimeMillis();\n         System.out.println(String.format(&quot;%sms&quot;, end -start));\n     }\n     public synchronized void run1(){\n\n         countDownLatch.countDown();\n     }\n }\n结果:44597ms</code></pre><p><em>对象头的介绍在下次具体介绍推荐直接到oracle官网查看介绍</em></p>\n","categories":["java"],"tags":["javase","并发"]},{"title":"类加载器子系统","url":"/2020/08/09/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/","content":"<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><p>  <em>JVM中有两种类型的类加载器，由C++编写的及由Java编写的。除了启动类加载器（Bootstrap Class Loader）是由C++编写的，其他都是由Java编写的。由Java编写的类加载器都继承自类java.lang.ClassLoader。各种类加载器之间存在逻辑上的父子关系，后面可以通过代码查看。</em><br>    <img src=\"/2020/08/09/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB.jpg\" alt=\"类加载器父子关系\"></p>\n<h3 id=\"启动类加载器\"><a href=\"#启动类加载器\" class=\"headerlink\" title=\"启动类加载器\"></a>启动类加载器</h3><p>  <em>因为启动类加载器是由C++编写的，通过Java程序去查看显示的是null，因此，启动类加载器无法被Java程序调用启动类加载器不像其他类加载器有实体，它是没有实体的，JVM将C++处理类加载的一套逻辑定义为启动类加载器。</em></p>\n<pre><code>/**\n * 查看类加载器的默认加载路径  也可以通过-Xbootclasspath 自行指定\n */\n public class ClassLoaderTest2 {\n\n    public static void main(String[] args) {\n        URL[] urls = Launcher.getBootstrapClassPath().getURLs();\n        for (URL url:urls){\n            System.out.println(url);\n        }\n    }\n }\n 结果为固定路径:\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/resources.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/rt.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/sunrsasign.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/jsse.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/jce.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/charsets.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/jfr.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/classes</code></pre><p>   <em>启动类加载器实际上是一段c++代码逻辑 从openjdk源码体现如下:</em></p>\n<pre><code>int JNICALL\nJavaMain(void * _args)\n{\n    ……\n    mainClass = LoadMainClass(env, mode, what);\n    ……\n}\n\nstatic jclass\nLoadMainClass(JNIEnv *env, int mode, char *name)\n{\n    jmethodID mid;\n    jstring str;\n    jobject result;\n    jlong start, end;\n    jclass cls = GetLauncherHelperClass(env);\n    NULL_CHECK0(cls);\n    if (JLI_IsTraceLauncher()) {\n        start = CounterGet();\n    }\n    NULL_CHECK0(mid = (*env)-&gt;GetStaticMethodID(env, cls,\n                &quot;checkAndLoadMain&quot;,\n                &quot;(ZILjava/lang/String;)Ljava/lang/Class;&quot;));\n\n    str = NewPlatformString(env, name);\n    CHECK_JNI_RETURN_0(\n        result = (*env)-&gt;CallStaticObjectMethod(\n            env, cls, mid, USE_STDERR, mode, str));\n\n    if (JLI_IsTraceLauncher()) {\n        end   = CounterGet();\n        printf(&quot;%ld micro seconds to load main class\\n&quot;,\n               (long)(jint)Counter2Micros(end-start));\n        printf(&quot;----%s----\\n&quot;, JLDEBUG_ENV_ENTRY);\n    }\n\n    return (jclass)result;\n}\n\njclass\nGetLauncherHelperClass(JNIEnv *env)\n{\n    if (helperClass == NULL) {\n        NULL_CHECK0(helperClass = FindBootStrapClass(env,\n                &quot;sun/launcher/LauncherHelper&quot;));\n    }\n    return helperClass;\n}\n\njclass\nFindBootStrapClass(JNIEnv *env, const char* classname)\n{\n   if (findBootClass == NULL) {\n       findBootClass = (FindClassFromBootLoader_t *)dlsym(RTLD_DEFAULT,\n          &quot;JVM_FindClassFromBootLoader&quot;);\n       if (findBootClass == NULL) {\n           JLI_ReportErrorMessage(DLL_ERROR4,\n               &quot;JVM_FindClassFromBootLoader&quot;);\n           return NULL;\n       }\n   }\n   return findBootClass(env, classname);\n}\n\nJVM_ENTRY(jclass, JVM_FindClassFromBootLoader(JNIEnv* env,\n                                              const char* name))\n  JVMWrapper2(&quot;JVM_FindClassFromBootLoader %s&quot;, name);\n\n  // Java libraries should ensure that name is never null...\n  if (name == NULL || (int)strlen(name) &gt; Symbol::max_length()) {\n    // It&apos;s impossible to create this class;  the name cannot fit\n    // into the constant pool.\n    return NULL;\n  }\n\n  TempNewSymbol h_name = SymbolTable::new_symbol(name, CHECK_NULL);\n  Klass* k = SystemDictionary::resolve_or_null(h_name, CHECK_NULL);\n  if (k == NULL) {\n    return NULL;\n  }\n\n  if (TraceClassResolution) {\n    trace_class_resolution(k);\n  }\n  return (jclass) JNIHandles::make_local(env, k-&gt;java_mirror());\nJVM_END</code></pre><p>  <em>这套逻辑做的事情就是通过启动类加载器加载类sun.launcher.LauncherHelper，执行该类的方法checkAndLoadMain，加载main函数所在的类，启动扩展类加载器、应用类加载器也是在这个时候完成的</em></p>\n<h3 id=\"拓展类加载器\"><a href=\"#拓展类加载器\" class=\"headerlink\" title=\"拓展类加载器\"></a>拓展类加载器</h3><pre><code>/**\n * 查看拓展类加载路径 也可以通过java.ext.dirs指定\n */\npublic static void main(String[] args) {\n    ClassLoader classLoader = ClassLoader.getSystemClassLoader().getParent();\n    URLClassLoader urlClassLoader = (URLClassLoader) classLoader;\n    URL[] urls = urlClassLoader.getURLs();\n    for (URL url : urls) {\n        System.out.println(url);\n    }\n}\n结果:\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/sunec.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/nashorn.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/cldrdata.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/jfxrt.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/dnsns.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/localedata.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/jaccess.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/zipfs.jar\nfile:/System/Library/Java/Extensions/MRJToolkit.jar</code></pre><h3 id=\"应用类加载器\"><a href=\"#应用类加载器\" class=\"headerlink\" title=\"应用类加载器\"></a>应用类加载器</h3><p>   <em>默认加载用户程序的类加载器</em></p>\n<pre><code>/**\n * 查看加载路径  可以通过java.class.path指定    \n */\npublic static void main(String[] args) {\n    String[] urls = System.getProperty(&quot;java.class.path&quot;).split(&quot;:&quot;);\n    for (String url : urls) {\n        System.out.println(url);\n    }\n    System.out.println(&quot;================================&quot;);\n    URLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n    URL[] urls1 = classLoader.getURLs();\n    for (URL url : urls1) {\n        System.out.println(url);\n    }\n}\n结果为你项目本地包所在路径</code></pre><h3 id=\"自定义类加载器\"><a href=\"#自定义类加载器\" class=\"headerlink\" title=\"自定义类加载器\"></a>自定义类加载器</h3><p>   <em>继承类java.lang.ClassLoader</em></p>\n<pre><code>public class ClassLoadeTest1 extends ClassLoader{\n    public static void main(String[] args) throws ClassNotFoundException {\n        ClassLoadeTest1 classLoadeTest1 = new ClassLoadeTest1();\n        Class&lt;?&gt; aClass = classLoadeTest1.loadClass(Demo1.class.getName());\n        System.out.println(aClass);\n        System.out.println(aClass.getClassLoader());\n    }\n    @Override\n    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {\n        System.out.println(&quot;findClass&quot;);\n        return null;\n    }\n}\n结果：\n   class com.example.classloade.Demo1\n   sun.misc.Launcher$AppClassLoader@18b4aac2\n 因为类加载中的双亲委派 所以打印出的加载类为AppClassLoader 这也是自定义的默认加载器</code></pre><p>   <em>自定义类加载器也可以打破双亲委派，看源码 此处代码说明类加载器父子关系图</em></p>\n<pre><code>/**\n * 类加载过程如下 \n * 自定义加载器只需要重写loadClass 在向上委托判断初改成自己加载逻辑即打破双亲委派\n **/\n  protected Class&lt;?&gt; loadClass(String name, boolean resolve)\n     throws ClassNotFoundException{\n\n     synchronized (getClassLoadingLock(name)) {\n        //判断类是否加载过\n         Class&lt;?&gt; c = findLoadedClass(name); \n         //==null 没有加载\n         if (c == null) {\n             long t0 = System.nanoTime();\n             try {\n                 //判断是否有父级 \n                 if (parent != null) {  \n                     //有父级委托父级加载 向上委派\n                     c = parent.loadClass(name, false);\n                 } else {\n                     //没有的话直接使用启动类加载器 最后调用的是navicat方法 进入c++\n                     c = findBootstrapClassOrNull(name);\n                 }\n             } catch (ClassNotFoundException e) {\n                 // ClassNotFoundException thrown if class not found\n                 // from the non-null parent class loader\n             }\n\n             if (c == null) {\n                 // If still not found, then invoke findClass in order\n                 // to find the class.\n                 long t1 = System.nanoTime();\n                 c = findClass(name);\n\n                 // this is the defining class loader; record the stats\n                 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                 sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                 sun.misc.PerfCounter.getFindClasses().increment();\n             }\n         }\n         //类是否解析\n         if (resolve) {\n             //解析类\n             resolveClass(c);\n         }\n         return c;\n     }\n }</code></pre><h2 id=\"类加载器创建链\"><a href=\"#类加载器创建链\" class=\"headerlink\" title=\"类加载器创建链\"></a>类加载器创建链</h2><p><em>刚才已经讲了启动类加载器是没有没有实体的，只是将一段c++代码逻辑命名成启动类加载器。启动类加载器做的事情是：<br>    加载类sun.launcher.LauncherHelper<br>    执行该类的方法checkAndLoadMain<br>    启动类、扩展类、应用类加载器逻辑上的父子关系就是在这个方法的调用链中生成</em></p>\n<ol>\n<li>\\openjdk\\jdk\\src\\share\\classes\\sun\\launcher\\LauncherHelper.java 核心代码</li>\n</ol>\n<pre><code>public enum LauncherHelper {\n……\n    private static final ClassLoader scloader = ClassLoader.\n                                        getSystemClassLoader();\n……\n    public static Class&lt;?&gt; checkAndLoadMain(boolean printToStderr,\n                                            int mode,\n                                            String what) {\n        ……\n        mainClass = scloader.loadClass(cn);\n        ……</code></pre><ol start=\"2\">\n<li>\\openjdk\\jdk\\src\\share\\classes\\java\\lang\\ClassLoader.java 核心代码sun.misc.Launcher.getLauncher();</li>\n</ol>\n<pre><code>public static ClassLoader getSystemClassLoader() {\n        initSystemClassLoader();\n        if (scl == null) {\n            return null;\n        }\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            checkClassLoaderPermission(scl, Reflection.getCallerClass());\n        }\n        return scl;\n    }\n\n    private static synchronized void initSystemClassLoader() {\n        if (!sclSet) {\n            if (scl != null)\n                throw new IllegalStateException(&quot;recursive invocation&quot;);\n            sun.misc.Launcher l = sun.misc.Launcher.getLauncher();\n        ……</code></pre><ol start=\"3\">\n<li>\\openjdk\\jdk\\src\\share\\classes\\sun\\misc\\Launcher.java </li>\n</ol>\n<pre><code>核心代码：\n• private static Launcher launcher = new Launcher();\n• extcl = ExtClassLoader.getExtClassLoader();\n• loader = AppClassLoader.getAppClassLoader(extcl);\n• Thread.currentThread().setContextClassLoader(loader);//设置当前线程上下文类加载器\n\npublic class Launcher {\n    private static URLStreamHandlerFactory factory = new Factory();\n    private static Launcher launcher = new Launcher();\n    private static String bootClassPath =\n        System.getProperty(&quot;sun.boot.class.path&quot;);\n\n    public static Launcher getLauncher() {\n        return launcher;\n    }\n\n    private ClassLoader loader;\n\n    public Launcher() {\n        // Create the extension class loader\n        ClassLoader extcl;\n        try {\n            extcl = ExtClassLoader.getExtClassLoader();\n        } catch (IOException e) {\n            throw new InternalError(\n                &quot;Could not create extension class loader&quot;, e);\n        }\n\n        // Now create the class loader to use to launch the application\n        try {\n            loader = AppClassLoader.getAppClassLoader(extcl);\n        } catch (IOException e) {\n            throw new InternalError(\n                &quot;Could not create application class loader&quot;, e);\n        }\n\n        // Also set the context class loader for the primordial thread.\n\n        Thread.currentThread().setContextClassLoader(loader);\n    ……</code></pre><ol start=\"4\">\n<li>扩展类加载器的创建流程</li>\n</ol>\n<pre><code> public static ExtClassLoader getExtClassLoader() throws IOException{\n     ……\n       return new ExtClassLoader(dirs);\n     ……\n\n//第二个参数传的是null，其实就是parent=null\npublic ExtClassLoader(File[] dirs) throws IOException {\n          super(getExtURLs(dirs), null, factory);\n      }\n URLClassLoader(URL[] urls, ClassLoader parent,\n                 AccessControlContext acc) {</code></pre><ol start=\"5\">\n<li>应用类加载器的创建流程</li>\n</ol>\n<pre><code>public static ClassLoader getAppClassLoader(final ClassLoader extcl)\n            throws IOException {\n    final String s = System.getProperty(&quot;java.class.path&quot;);\n    final File[] path = (s == null) ? new File[0] : getClassPath(s);\n\n    // Note: on bugid 4256530\n    // Prior implementations of this doPrivileged() block supplied\n    // a rather restrictive ACC via a call to the private method\n    // AppClassLoader.getContext(). This proved overly restrictive\n    // when loading  classes. Specifically it prevent\n    // accessClassInPackage.sun.* grants from being honored.\n    //\n    return AccessController.doPrivileged(\n        new PrivilegedAction&lt;AppClassLoader&gt;() {\n            public AppClassLoader run() {\n                URL[] urls =\n                    (s == null) ? new URL[0] : pathToURLs(path);\n                return new AppClassLoader(urls, extcl);\n            }\n        });\n}\n\nAppClassLoader(URL[] urls, ClassLoader parent) {\n    super(urls, parent, factory);\n}</code></pre><p>   <em>应用类、扩展类加载器的父子关系就是这样建立的.</em></p>\n<h2 id=\"类加载器加载完成后的存储\"><a href=\"#类加载器加载完成后的存储\" class=\"headerlink\" title=\"类加载器加载完成后的存储\"></a>类加载器加载完成后的存储</h2><p>   <em>类加载完成会存储在方法区 而不同的类加载器加载的类都有其相对应的一块区域。如果不同的加载器加载了同一个class 那么他们是两份数据当然也不是同一个类了</em></p>\n<h2 id=\"双亲委派\"><a href=\"#双亲委派\" class=\"headerlink\" title=\"双亲委派\"></a>双亲委派</h2><p>   <em>如果一个类加载器收到了加载某个类的请求,则该类加载器并不会去加载该类,而是把这个请求委派给父类加载器,每一个层次的类加载器都是如此,因此所有的类加载请求最终都会传送到顶端的启动类加载器;只有当父类加载器在其搜索范围内无法找到所需的类,并将该结果反馈给子类加载器,子类加载器会尝试去自己加载。</em>  </p>\n<p>   <img src=\"/2020/08/09/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.jpg\" alt=\"双亲委派图解\">  </p>\n<h2 id=\"打破双亲委派\"><a href=\"#打破双亲委派\" class=\"headerlink\" title=\"打破双亲委派\"></a>打破双亲委派</h2><p><em>因为在某些情况下父类加载器需要委托子类加载器去加载class文件。受到加载范围的限制，父类加载器无法加载到需要的文件，以Driver接口为例，由于Driver接口定义在jdk当中的，而其实现由各个数据库的服务商来提供，比如mysql的就写了MySQL Connector，那么问题就来了，DriverManager（也由jdk提供）要加载各个实现了Driver接口的实现类，然后进行管理，但是DriverManager由启动类加载器加载，只能加载JAVA_HOME的lib下文件，而其实现是由服务商提供的，由系统类加载器加载，这个时候就需要启动类加载器来委托子类来加载Driver实现，从而破坏了双亲委派。<br>类似这样的情况就需要打破双亲委派。打破双亲委派的意思其实就是不委派、向下委派</em></p>\n<ul>\n<li>方式</li>\n</ul>\n<ol>\n<li>自定义类加载器<br> <em>1.4 中代码有提及</em></li>\n<li>SPI<br> <em>是一种服务发现机制。它通过在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。这一机制为很多框架扩展提供了可能，比如在Dubbo、JDBC中都使用到了SPI机制</em></li>\n</ol>\n<h2 id=\"线程上下文类加载器\"><a href=\"#线程上下文类加载器\" class=\"headerlink\" title=\"线程上下文类加载器\"></a>线程上下文类加载器</h2><ol>\n<li>是什么<br><em>一种特殊的类加载器，可以通过Thread获取，基于此可实现逆向委托加载</em></li>\n<li>存在的理由<br><em>为了解决双亲委派的缺陷而生</em></li>\n<li>如何使用</li>\n</ol>\n<pre><code>//获取\nThread.currentThread().getContextClassLoader()\n//设置\nThread.currentThread().setContextClassLoader(new Classloader_4());   </code></pre><h2 id=\"沙箱安全\"><a href=\"#沙箱安全\" class=\"headerlink\" title=\"沙箱安全\"></a>沙箱安全</h2><p>   <em>看openjdk源码会看到有这样的判断AccessController.doPrivileged.比如我定义了一个类名为String所在包为java.lang，因为这个类本来是属于jdk的，如果没有沙箱安全机制的话，这个类将会污染到我所有的String,但是由于沙箱安全机制，所以就委托顶层的bootstrap加载器查找这个类，如果没有的话就委托extsion,extsion没有就到aapclassloader，但是由于String就是jdk的源代码，所以在bootstrap那里就加载到了，先找到先使用，所以就使用bootstrap里面的String,后面的一概不能使用，这就保证了不被恶意代码污染.它的主要作用为保护核心类库</em></p>\n","categories":["java"],"tags":["JVM"]}]