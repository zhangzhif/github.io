[{"title":"ArrayList源码解析","url":"/2019/12/01/ArrayList/","content":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p>  <em>实现了三个标记接口: RandomAccess, Cloneable, java.io.Serializable</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"RandomAccess\"><a href=\"#RandomAccess\" class=\"headerlink\" title=\"RandomAccess\"></a>RandomAccess</h3><p>   <em>支持随机访问（基于下标）,为了能够更好地判断集合是ArrayList还是LinkedList，从而能够更好选择更优的遍历方式，提高性能！</em></p>\n<h3 id=\"Cloneable\"><a href=\"#Cloneable\" class=\"headerlink\" title=\"Cloneable\"></a>Cloneable</h3><p>   <em>支持拷贝：实现Cloneable接口，重写clone方法、方法内容默认调用父类的clone方法。</em></p>\n<ol>\n<li>浅拷贝<br><em>对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝</em></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">               Study study = (Study) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">               <span class=\"keyword\">return</span> study;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<ol start=\"2\">\n<li>深拷贝<br><em>对基本数据类型进行值传递，对引用数据类型创建一个新的对象，并复制内容，这是深拷贝</em></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">    Study s = (Study) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    s.setScore(<span class=\"keyword\">this</span>.score.clone());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <em>java的传参有基本类型和引用类型传参,参数传递时拷贝的都是栈中的内容。此处大概分为三种情况</em></p>\n<ol>\n<li>基本类型,存储在栈中所以拷贝的就是真实的值，修改后不影响原值</li>\n<li>引用类型:栈中内容为对象引用,拷贝的也为引用 修改改变的是引用所指向的对象,由于引用的同一个对象，所以元对象改变了</li>\n<li>String:虽然String也是引用类型 但于String是不可变对象 在修改时会讲引用指向一个新的对象，所已他们的引用变得不同了，当然不会改变原值</li>\n</ol>\n<h3 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h3><p><em>序列化：将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据，在Java中的这个Serializable接口其实是给jvm看的，通知jvm，我不对这个类做序列化了，你(jvm)帮我序列化就好了。如果我们没有自己声明一个serialVersionUID变量,接口会默认生成一个serialVersionUID，默认的serialVersinUID对于class的细节非常敏感，反序列化时可能会导致InvalidClassException这个异常（每次序列化都会重新计算该值）</em></p>\n<h3 id=\"AbstractList\"><a href=\"#AbstractList\" class=\"headerlink\" title=\"AbstractList\"></a>AbstractList</h3><p><em>继承了AbstractList ，说明它是一个列表，拥有相应的增，删，查，改等功能。</em></p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>为什么继承了 AbstractList 还需要 实现List 接口？</p>\n<p><em>1、在StackOverFlow 中：传送门 得票最高的答案的回答者说他问了当初写这段代码的 Josh Bloch，得知这就是一个写法错误。<br> I’ve asked Josh Bloch, and he informs me that it was a mistake.He used to think, long ago, that there was some value in it,<br> but he since “saw the light”.Clearly JDK maintainers haven’t considered this to be worth backing out later.</em></p>\n<h2 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 序列化版本号（类文件签名），如果不写会默认生成</span></span><br><span class=\"line\"><span class=\"comment\"> * 类内容的改变会影响签名变化，导致反序列化失败</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8683452581122892189L</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果实例化时未指定容量，则在初次添加元素时会进行扩容使用此容量作为数组长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * static修饰，所有的未指定容量的实例(也未添加元素)共享此数组</span></span><br><span class=\"line\"><span class=\"comment\"> * 两个空的数组有什么区别呢？</span></span><br><span class=\"line\"><span class=\"comment\"> * 就是第一次添加元素时知道该 elementData 从空的构造函数还是有参构造函数被初始化的。</span></span><br><span class=\"line\"><span class=\"comment\"> * 以便确认如何扩容。空的构造器则初始化为10，有参构造器则按照扩容因子扩容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * arrayList真正存放元素的地方，长度大于等于size</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * arrayList中的元素个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 无参构造器，构造一个容量大小为 10 的空的 list 集，</span></span><br><span class=\"line\"><span class=\"comment\"> * 但构造函数只是给 elementData 赋值了一个空的数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 是在第一次添加元素时容量扩大至 10 的。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当使用无参构造函数时是把DEFAULTCAPACITY_EMPTY_ELEMENTDATA 赋值给 elementData。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当initialCapacity 为零时则是把 EMPTY_ELEMENTDATA 赋值给 elementData。 </span></span><br><span class=\"line\"><span class=\"comment\"> * 当initialCapacity大于零初始化一个大小为initialCapacity的object数组并赋值给elementData。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> initialCapacity 初始大小</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+ initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将 Collection 转化为数组，数组长度赋值给 size。 </span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 size 不为零，则判断 elementData 的 class 类型是否为 ArrayList，不是的话则做一次转换。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 size 为零，则把 EMPTY_ELEMENTDATA 赋值给 elementData，相当于new ArrayList(0)。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> c </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((size = a.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.getClass() == ArrayList<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">            elementData = a;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            elementData = Arrays.copyOf(a, size, Object[]<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 指向空数组</span></span><br><span class=\"line\">        elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h2><h3 id=\"尾部插入-默认\"><a href=\"#尾部插入-默认\" class=\"headerlink\" title=\"尾部插入(默认)\"></a>尾部插入(默认)</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次添加元素到集合中时都会先确认下集合容量大小。然后将 size 自增 1赋值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断如果 elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class=\"line\"><span class=\"comment\"> * 就取 DEFAULT_CAPACITY 和 minCapacity 的最大值也就是 10。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这就是 EMPTY_ELEMENTDATA 与DEFAULTCAPACITY_EMPTY_ELEMENTDATA 的区别所在。</span></span><br><span class=\"line\"><span class=\"comment\"> * 同时也验证了上面的说法：使用无参构造函数时是在第一次添加元素时初始化容量为 10 的</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对modCount自增1,记录操作次数,如果minCapacity大于elementData的长度,则对集合进行扩容,</span></span><br><span class=\"line\"><span class=\"comment\"> * 第一次添加元素时 elementData 的长度为零</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>插入性能与linkedList对比</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> jdk8.list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * arrayList 提前指定容量大小 插入性能对比linkedList</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zhangzhifeng </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EffectTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不指定下标插入</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = <span class=\"number\">10000000</span>;</span><br><span class=\"line\">        <span class=\"comment\">//指定容量时</span></span><br><span class=\"line\">        List arrayList = <span class=\"keyword\">new</span> ArrayList(length);</span><br><span class=\"line\"></span><br><span class=\"line\">        List linkedList = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start5 = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt;length;i++)&#123;</span><br><span class=\"line\">            arrayList.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end5 = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"arrayList:\"</span>+(end5-start5));</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start6 = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i &lt;length;i++)&#123;</span><br><span class=\"line\">            linkedList.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> end6 = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"linkedList:\"</span>+(end6-start6));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//结果</span></span><br><span class=\"line\">    <span class=\"comment\">//arrayList:1876</span></span><br><span class=\"line\">    <span class=\"comment\">//linkedList:8040</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>arrayList涉及扩容，会消耗性能但是如果提前指定容量，会提升性能，可以达到与linkedList相当，甚至超越</strong></p>\n<hr>\n<h3 id=\"指定下标插入\"><a href=\"#指定下标插入\" class=\"headerlink\" title=\"指定下标插入\"></a>指定下标插入</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下标越界检查</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同上尾部插入判断扩容,记录操作数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 依次复制插入位置及后面的数组元素，到后面一格，不是移动，</span></span><br><span class=\"line\"><span class=\"comment\">     * 因此复制完后，添加的下标位置和下一个位置指向对同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">            size - index);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 再将元素赋值给该下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>时间复杂度为O(n)，与移动的元素个数正相关</strong></p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 获取当前数组长度</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 默认将扩容至原来容量的 1.5 倍</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果1.5倍太小的话，则将我们所需的容量大小赋值给newCapacity</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                newCapacity = minCapacity;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果1.5倍太大或者我们需要的容量太大，</span></span><br><span class=\"line\"><span class=\"comment\">             * 那就直接拿 newCapacity = (minCapacity &gt; MAX_ARRAY_SIZE) ?</span></span><br><span class=\"line\"><span class=\"comment\">             * Integer.MAX_VALUE : MAX_ARRAY_SIZE 来扩容</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 然后将原数组中的数据复制到大小为 newCapacity 的新数组中，并将新数组赋值给 elementData。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 需要的长度溢出 抛OOM异常</span></span><br><span class=\"line\"><span class=\"comment\">         * 大于数组长度最大值直接取Integer.max</span></span><br><span class=\"line\"><span class=\"comment\">         * 否则拿最大长度MAX_ARRAY_SIZE</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">                    Integer.MAX_VALUE :</span><br><span class=\"line\">                    MAX_ARRAY_SIZE;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 检查 index 是否合法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 操作数+1</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 判断要删除的元素是否是最后一个位</span></span><br><span class=\"line\"><span class=\"comment\">         * 如果 index 不是最后一个，就从 index + 1 开始往后所有的元素都向前拷贝一份。</span></span><br><span class=\"line\"><span class=\"comment\">         * 然后将数组的最后一个位置空,如果 index 是最后一个元素那么就直接将数组的最后一个位置空</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 让指针最后指向空，进行gc</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当我们调用 remove(Object o) 时，会把 o 分为是否为空来分别处理。</span></span><br><span class=\"line\"><span class=\"comment\">     * 对数组做遍历，找到第一个与 o 对应的下标 index</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用 fastRemove 方法，删除下标为 index 的元素。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    fastRemove(index);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (o.equals(elementData[index])) &#123;</span><br><span class=\"line\">                    fastRemove(index);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fastRemove(int index) 方法和 remove(int index) 方法基本全部相同。</span></span><br><span class=\"line\"><span class=\"comment\">     * 它不用校验index的合法性和记录删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,numMoved);</span><br><span class=\"line\">        elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代器-iterator\"><a href=\"#迭代器-iterator\" class=\"headerlink\" title=\"迭代器 iterator\"></a>迭代器 iterator</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ArrayList 内部类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代表下一个要访问的元素下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cursor;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代表上一个要访问的元素下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代表对 ArrayList 修改次数的期望值，初始值为 modCount</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果下一个元素的下标等于集合的大小 ，就证明到最后了</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//判断expectedModCount和modCount是否相等,ConcurrentModificationException</span></span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">        <span class=\"comment\">//对 cursor 进行判断，看是否超过集合大小和数组长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        <span class=\"comment\">// 自增 1。开始时，cursor = 0，lastRet = -1；每调用一次next方法，cursor和lastRet都会自增1。</span></span><br><span class=\"line\">        cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//将cursor赋值给lastRet，并返回下标为 lastRet 的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断 lastRet 的值是否小于 0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">        <span class=\"comment\">//判断expectedModCount和modCount是否相等,ConcurrentModificationException</span></span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//直接调用 ArrayList 的 remove 方法删除下标为 lastRet 的元素</span></span><br><span class=\"line\">            ArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</span><br><span class=\"line\">            <span class=\"comment\">//将 lastRet 赋值给 curso</span></span><br><span class=\"line\">            cursor = lastRet;</span><br><span class=\"line\">            <span class=\"comment\">//将 lastRet 重新赋值为 -1，并将 modCount 重新赋值给 expectedModCount。</span></span><br><span class=\"line\">            lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            expectedModCount = modCount;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>remove 方法的弊端。<br> 1、只能进行remove操作，add、clear 等 Itr 中没有。<br> 2、调用 remove 之前必须先调用 next。因为 remove 开始就对 lastRet 做了校验。而 lastRet 初始化时为 -1。<br> 3、next 之后只可以调用一次 remove。因为 remove 会将 lastRet 重新初始化为 -1</em></p>\n<h2 id=\"fail-fast\"><a href=\"#fail-fast\" class=\"headerlink\" title=\"fail-fast\"></a>fail-fast</h2><p><em>fail-fast机制是java集合中的一种错误机制。当使用迭代器迭代时，如果发现集合有修改，则快速失败做出响应，抛出ConcurrentModificationException异常。这种修改有可能是其它线程的修改，也有可能是当前线程自己的修改导致的，比如迭代的过程中直接调用remove()删除元素等。另外，并不是java中所有的集合都有fail-fast的机制。比如，像最终一致性的ConcurrentHashMap、CopyOnWriterArrayList等都是没有fast-fail的。<br> fail-fast是怎么实现的：<br> ArrayList、HashMap中都有一个属性叫modCount，每次对集合的修改这个值都会加1，在遍历前记录这个值到expectedModCount中，遍历中检查两者是否一致，如果出现不一致就说明有修改，则抛出ConcurrentModificationException异常。<br> 底层数组存/取元素效率非常的高(get/set)，时间复杂度是O(1)，而查找（比如：indexOf，contain），插入和删除元素效率不太高，时间复杂度为O(n)。<br> 插入/删除元素会触发底层数组频繁拷贝，效率不高，还会造成内存空间的浪费，解决方案：linkedList<br> 查找元素效率不高，解决方案：HashMap（红黑树）</em></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>创建时指定最好初始长度,减少扩容次数提升效率</p>\n</li>\n<li><p>arrayList.subList(beginIndex,endIndex) 返回其内部类 通过指定偏移量操作原对象。（源对象不可变此处有fast-fail检查）</p>\n</li>\n<li><p>属性 modCount 每次添加删除元素 +1 fast-fail 检查</p>\n</li>\n<li><p>List unmodifiableList = Collections.unmodifiableList(list); 不可变list 原对象可变   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造器  </span></span><br><span class=\"line\">UnmodifiableList(List&lt;? extends E&gt; list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(list);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//get 操作的原对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;<span class=\"keyword\">return</span> list.get(index);&#125;</span><br><span class=\"line\"><span class=\"comment\">//变更操作直接抛异常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Arrays.asList(T..) 返回的是Arrays内部类。若传入的数组为基本类型,返回的list长度一直为1。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Integer[] array = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">List list = Arrays.asList(array);</span><br><span class=\"line\"><span class=\"comment\">//list.size() = 3</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] array1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">List list1 = Arrays.asList(array1);</span><br><span class=\"line\"><span class=\"comment\">// list.size() = 1</span></span><br><span class=\"line\"><span class=\"comment\">//基本类型不支持范型，此处会变成int[1][]</span></span><br><span class=\"line\"><span class=\"comment\">// debug 自测</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>List的最大长度为什么为 Integer.max-8</p>\n</li>\n</ol>\n","categories":["java"],"tags":["javase"]},{"title":"CopyOnWriteArrayList源码解析","url":"/2019/12/08/CopyOnWriteArrayList/","content":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CopyOnWriteArrayList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<p><em>特性基本与ArrayList一致，底层也是数组结构</em></p>\n<h2 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8673264195747942595L</span>;<span class=\"comment\">//序列化版本号</span></span><br><span class=\"line\"><span class=\"comment\">//全局锁</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">transient</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"comment\">//存储数据的数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Object[] array;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CopyOnWriteArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    setArray(<span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]);<span class=\"comment\">//创建一个大小为0的Object数组作为array初始值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CopyOnWriteArrayList</span><span class=\"params\">(E[] toCopyIn)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个list，其内部元素是toCopyIn的的副本</span></span><br><span class=\"line\">    setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[]<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将传入参数集合中的元素复制到本list中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CopyOnWriteArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    Object[] elements;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c.getClass() == CopyOnWriteArrayList<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">elements</span> </span>= ((CopyOnWriteArrayList&lt;?&gt;)c).getArray();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        elements = c.toArray();</span><br><span class=\"line\">        <span class=\"comment\">// c.toArray可能不是Object[]（比如：继承ArrayList</span></span><br><span class=\"line\">        <span class=\"comment\">// 重写toArray方法返回String[]</span></span><br><span class=\"line\">        <span class=\"comment\">//只有ArrayList的toArray方法实现是Arrays.copyOf</span></span><br><span class=\"line\">        <span class=\"comment\">// 因此在jdk8中，此处改为了ArrayList.class）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elements.getClass() != Object[]<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">            <span class=\"title\">elements</span> </span>= Arrays.copyOf(elements, elements.length, Object[]<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setArray(elements);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h2><h3 id=\"默认插入\"><a href=\"#默认插入\" class=\"headerlink\" title=\"默认插入\"></a>默认插入</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();<span class=\"comment\">//先加锁</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</span><br><span class=\"line\">        <span class=\"comment\">//复制到新数组中，长度+1</span></span><br><span class=\"line\">        Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//在新数组中添加元素</span></span><br><span class=\"line\">        newElements[len] = e;</span><br><span class=\"line\">        <span class=\"comment\">//将新数组设置给array</span></span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定位置插入\"><a href=\"#指定位置插入\" class=\"headerlink\" title=\"指定位置插入\"></a>指定位置插入</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    <span class=\"comment\">// 加锁</span></span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取旧数组</span></span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</span><br><span class=\"line\">        <span class=\"comment\">// 检查是否越界, 可以等于len</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; len || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index+</span><br><span class=\"line\">                                                <span class=\"string\">\", Size: \"</span>+len);</span><br><span class=\"line\">        Object[] newElements;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = len - index;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 如果插入的位置是最后一位</span></span><br><span class=\"line\">            <span class=\"comment\">// 那么拷贝一个n+1的数组, 其前n个元素与旧数组一致</span></span><br><span class=\"line\">            newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果插入的位置不是最后一位</span></span><br><span class=\"line\">            <span class=\"comment\">// 那么新建一个n+1的数组</span></span><br><span class=\"line\">            newElements = <span class=\"keyword\">new</span> Object[len + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">// 拷贝旧数组前index的元素到新数组中</span></span><br><span class=\"line\">            System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">            <span class=\"comment\">// 将index及其之后的元素往后挪一位拷贝到新数组中</span></span><br><span class=\"line\">            <span class=\"comment\">// 这样正好index位置是空出来的</span></span><br><span class=\"line\">            System.arraycopy(elements, index, newElements, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                             numMoved);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将元素放置在index处</span></span><br><span class=\"line\">        newElements[index] = element;</span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"addIfAbsent\"><a href=\"#addIfAbsent\" class=\"headerlink\" title=\"addIfAbsent\"></a>addIfAbsent</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个不存在于集合中的元素。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addIfAbsent</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取元素数组</span></span><br><span class=\"line\">    Object[] snapshot = getArray();</span><br><span class=\"line\">    <span class=\"comment\">//已存在返回false，否则添加</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> indexOf(e, snapshot, <span class=\"number\">0</span>, snapshot.length) &gt;= <span class=\"number\">0</span> ? <span class=\"keyword\">false</span> :</span><br><span class=\"line\">        addIfAbsent(e, snapshot);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addIfAbsent</span><span class=\"params\">(E e, Object[] snapshot)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重新获取旧数组</span></span><br><span class=\"line\">        Object[] current = getArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = current.length;</span><br><span class=\"line\">        <span class=\"comment\">// 如果快照与刚获取的数组不一致，说明有修改</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (snapshot != current) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 重新检查元素是否在刚获取的数组里，减少indexOf的对比次数</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> common = Math.min(snapshot.length, len);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; common; i++)</span><br><span class=\"line\">                <span class=\"comment\">//判断是否有线程指定下标添加了元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current[i] != snapshot[i] &amp;&amp; eq(e, current[i]))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (indexOf(e, current, common, len) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 拷贝一份n+1的数组</span></span><br><span class=\"line\">        Object[] newElements = Arrays.copyOf(current, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 将元素放在最后一位</span></span><br><span class=\"line\">        newElements[len] = e;</span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(getArray(), index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> Object[] getArray() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//私有方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">get</span><span class=\"params\">(Object[] a, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) a[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>这个方法是线程不安全的，因为这个分成了两步，分别是获取数组和获取元素，而且中间过程没有加锁。假设当前线程在获取数组（执行getArray()）后，其他线程修改了这个CopyOnWriteArrayList，那么它里面的元素就会改变，但此时当前线程返回的仍然是旧的数组，所以返回的元素就不是最新的了，这就是写时复制策略产生的弱一致性问题。</em></strong></p>\n<h3 id=\"修改元素\"><a href=\"#修改元素\" class=\"headerlink\" title=\"修改元素\"></a>修改元素</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"comment\">// 先获取要修改的旧值</span></span><br><span class=\"line\">        E oldValue = get(elements, index);</span><br><span class=\"line\">        <span class=\"comment\">// 值确实需要修改</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldValue != element) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = elements.length;</span><br><span class=\"line\">            <span class=\"comment\">// 将array复制到新数组</span></span><br><span class=\"line\">            Object[] newElements = Arrays.copyOf(elements, len);     </span><br><span class=\"line\">            <span class=\"comment\">// 修改元素       </span></span><br><span class=\"line\">            newElements[index] = element;</span><br><span class=\"line\">            <span class=\"comment\">// 设置array为新数组</span></span><br><span class=\"line\">            setArray(newElements);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 虽然值不需要改，但要保证volatile语义，需重新设置array</span></span><br><span class=\"line\">            setArray(elements);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = elements.length;</span><br><span class=\"line\">        <span class=\"comment\">//获取要删除的元素</span></span><br><span class=\"line\">        E oldValue = get(elements, index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = len - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved == <span class=\"number\">0</span>)<span class=\"comment\">//删除的是最后一个元素</span></span><br><span class=\"line\">            setArray(Arrays.copyOf(elements, len - <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//将元素分两次复制到新数组中</span></span><br><span class=\"line\">            Object[] newElements = <span class=\"keyword\">new</span> Object[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">//拷贝index前面的元素</span></span><br><span class=\"line\">            System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">            <span class=\"comment\">//拷贝index后面的元素</span></span><br><span class=\"line\">            System.arraycopy(elements, index + <span class=\"number\">1</span>, newElements, index,numMoved);</span><br><span class=\"line\">            setArray(newElements);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"弱一致性的迭代器\"><a href=\"#弱一致性的迭代器\" class=\"headerlink\" title=\"弱一致性的迭代器\"></a>弱一致性的迭代器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//返回一个COWIterator对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> COWIterator&lt;E&gt;(getArray(), <span class=\"number\">0</span>);   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">COWIterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//数组array快照</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object[] snapshot;</span><br><span class=\"line\">    <span class=\"comment\">//遍历时的数组下标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cursor;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">COWIterator</span><span class=\"params\">(Object[] elements, <span class=\"keyword\">int</span> initialCursor)</span> </span>&#123;</span><br><span class=\"line\">        cursor = initialCursor;</span><br><span class=\"line\">        <span class=\"comment\">//保存了当前list的内容</span></span><br><span class=\"line\">        snapshot = elements;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cursor &lt; snapshot.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! hasNext())</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (E) snapshot[cursor++];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>如果在返回迭代器后没有对里面的数组array进行修改，则这两个变量指向的确实是同一个数组；但是若修改了，则根据前面所讲，它是会新建一个数组，然后将修改后的数组复制到新建的数组，而老的数组就会被“丢弃”，所以如果修改了数组，则此时snapshot指向的还是原来的数组，而array变量已经指向了新的修改后的数组了。这也就说明获取迭代器后，使用迭代器元素时，其他线程对该list的增删改不可见，因为他们操作的是两个不同的数组，这就是弱一致性。</em></strong></p>\n<p><strong><em>CopyOnWriteArrayList使用写时复制策略保证list的一致性，而获取–修改–写入三个步骤不是原子性，所以需要一个独占锁保证修改数据时只有一个线程能够进行。另外，CopyOnWriteArrayList提供了弱一致性的迭代器，从而保证在获取迭代器后，其他线程对list的修改是不可见的，迭代器遍历的数组是一个快照。</em></strong></p>\n<h2 id=\"使用场景及优点\"><a href=\"#使用场景及优点\" class=\"headerlink\" title=\"使用场景及优点\"></a>使用场景及优点</h2><p><strong><em>并发容器用于读多写少的并发场景。比如白名单，黑名单等场景。</em></strong></p>\n<p><strong><em>读操作可能会远远多于写操作的场景。比如，有些系统级别的信息，往往只需要加载或者修改很少的次数，但是会被系统内所有模块频繁的访问。对于这种场景，我们最希望看到的就是读操作可以尽可能的快，而写即使慢一些也没关系。</em></strong></p>\n<p><strong><em>CopyOnWriteArrayList 的思想比读写锁的思想更进一步。为了将读取的性能发挥到极致，CopyOnWriteArrayList 读取是完全不用加锁的，更厉害的是，写入也不会阻塞读取操作，也就是说你可以在写入的同时进行读取，只有写入和写入之间需要进行同步，也就是不允许多个写入同时发生，但是在写入发生时允许读取同时发生。这样一来，读操作的性能就会大幅度提升。读写分离</em></strong> </p>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><p><strong><em>内存占用，弱一致性</em></strong> </p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p><em>为什么CopyOnWriteArrayList没有size属性?</em></p>\n","categories":["java"],"tags":["javase"]},{"title":"LinkedList源码解析","url":"/2019/12/03/LinkedList/","content":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AbstractSequentialList\"><a href=\"#AbstractSequentialList\" class=\"headerlink\" title=\"AbstractSequentialList\"></a>AbstractSequentialList</h3><p>   <em>继承于AbstractSequentialList,本质上面与继承AbstractList没有什么区别,AbstractSequentialList完善了AbstractList中没有实现的方法。</em></p>\n<h3 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h3><p>   <em>可序列化。成员变量 Node 使用 transient 修饰，通过重写read/writeObject 方法实现序列化。</em></p>\n<h3 id=\"Cloneable\"><a href=\"#Cloneable\" class=\"headerlink\" title=\"Cloneable\"></a>Cloneable</h3><p>   <em>重写clone()方法，通过创建新的LinkedList对象，遍历拷贝数据进行对象拷贝。</em></p>\n<h3 id=\"Deque\"><a href=\"#Deque\" class=\"headerlink\" title=\"Deque\"></a>Deque</h3><p>   <em>实现了Collection大家庭中的队列接口,说明他拥有作为双端队列的功能。</em></p>\n<p><strong><em>LinkedList与ArrayList最大的区别就是LinkedList中实现了Collection中的QueueDeque接口拥有作为双端队列的功能!</em></strong></p>\n<h2 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前元素个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 第一个结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; first;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最后一个结点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; last;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Node的数据结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 本节点的元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    E item;<span class=\"comment\">//存储元素</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下一个节点（后继）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Node&lt;E&gt; next;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上一个节点(前驱)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Node&lt;E&gt; prev;</span><br><span class=\"line\">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = element;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prev = prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>LinkedList 在1.6 版本以及之前，只通过一个 header 头指针保存队列头和尾。这种操作可以说很有深度，但是从代码阅读性来说，却加深了阅读代码的难度。因此在后续的JDK 更新中，将头节点和尾节点 区分开了。节点类也更名为 Node。</em></strong></p>\n<p><strong><em>为什么Node这个类是静态的？答案是：这跟内存泄露有关，Node类是在LinkedList类中的，也就是一个内部类，若不使用static修饰，那么Node就是一个普通的内部类，在java中，一个普通内部类在实例化之后，默认会持有外部类的引用，这就有可能造成内存泄露（内部类与外部类生命周期不一致时）。但使用static修饰过的内部类（称为静态内部类），就不会有这种问题</em></strong></p>\n<p><strong><em>非静态内部类会自动生成一个构造器依赖于外部类:也是内部类可以访问外部类的实例变量的原因,静态内部类不会生成,访问不了外部类的实例变量,只能访问类变量。通过字节码可以得到验证!</em></strong></p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>();</span><br><span class=\"line\">    <span class=\"comment\">//操作次数只会记录一次设置前驱后继</span></span><br><span class=\"line\">    addAll(c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认尾部添加</span></span><br><span class=\"line\">    linkLast(e);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标节点创建后寻找前驱节点,前驱节点存在就修改前驱节点的后继,指向目标节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取这个list对象内部的Node类型成员last，即末位节点，以该节点作为新插入元素的前驱节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">    <span class=\"comment\">//创建新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//把新节点作为该list对象的最后一个节点</span></span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    <span class=\"comment\">//处理原先的末位节点，如果这个list本来就是一个空的链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//把新节点作为首节点</span></span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">//如果链表内部已经有元素，把原来的末位节点的后继指向新节点，完成链表修改</span></span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    <span class=\"comment\">//修改当前list的size</span></span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    <span class=\"comment\">//并记录该list对象被执行修改的次数</span></span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检查下标的合法性</span></span><br><span class=\"line\">    checkPositionIndex(index);</span><br><span class=\"line\">    <span class=\"comment\">//插入位置是末位，那还是上面末位添加的逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == size)</span><br><span class=\"line\">        linkLast(element);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        linkBefore(element, node(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPositionIndex(index))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt;= size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//二分查找 index离哪端更近 就从哪端开始找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</span><br><span class=\"line\">            <span class=\"comment\">//找到index位置的元素</span></span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 指位添加方法核心逻辑  操作新节点</span></span><br><span class=\"line\"><span class=\"comment\"> * 紧接修改原有节点的前驱属性，最后再修改前驱节点的后继属性</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> e</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> succ</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkBefore</span><span class=\"params\">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//原位置节点的前驱pred</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class=\"line\">    <span class=\"comment\">//创建新节点,设置新节点其前驱为原位置节点的前驱pred，其后继为原位置节点succ</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class=\"line\">    <span class=\"comment\">//将新节点设置到原位置节点的前驱</span></span><br><span class=\"line\">    succ.prev = newNode;</span><br><span class=\"line\">    <span class=\"comment\">//前驱如果为空，空链表，则新节点设置为first</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">//将新节点设置到前驱节点的后继</span></span><br><span class=\"line\">        pred.next = newNode;</span><br><span class=\"line\">    <span class=\"comment\">//修改当前list的size</span></span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    <span class=\"comment\">//记录该list对象被执行修改的次数。</span></span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    checkPositionIndex(index);</span><br><span class=\"line\">    <span class=\"comment\">//将集合转化为数组</span></span><br><span class=\"line\">    Object[] a = c.toArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numNew = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numNew == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Node&lt;E&gt; pred, succ;</span><br><span class=\"line\">    <span class=\"comment\">//获取插入节点的前节点（prev）和尾节点（next）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == size) &#123;</span><br><span class=\"line\">        succ = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        pred = last;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        succ = node(index);</span><br><span class=\"line\">        pred = succ.prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将集合中的数据编织成链表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object o : a) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>) E e = (E) o;</span><br><span class=\"line\">        Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            first = newNode;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pred.next = newNode;</span><br><span class=\"line\">        pred = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将 Collection 的链表插入 LinkedList 中。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (succ == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last = pred;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pred.next = succ;</span><br><span class=\"line\">        succ.prev = pred;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size += numNew;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><h3 id=\"AbstractSequentialList-gt-remove\"><a href=\"#AbstractSequentialList-gt-remove\" class=\"headerlink\" title=\"AbstractSequentialList-&gt;remove\"></a>AbstractSequentialList-&gt;remove</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        checkElementIndex(index);</span><br><span class=\"line\">        <span class=\"comment\">//node(index)找到index位置的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> unlink(node(index));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * remove(Object o)这个删除元素的方法的形参o是数据本身</span></span><br><span class=\"line\"><span class=\"comment\"> * 而不是LinkedList集合中的元素（节点）</span></span><br><span class=\"line\"><span class=\"comment\"> * 所以需要先通过节点遍历的方式，找到o数据对应的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 然后再调用unlink(Node x)方法将其删除</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> o</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                unlink(x);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.equals(x.item)) &#123;</span><br><span class=\"line\">                unlink(x);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">unlink</span><span class=\"params\">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//x的数据域element</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> E element = x.item;</span><br><span class=\"line\">    <span class=\"comment\">//x的下一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">    <span class=\"comment\">//x的上一个结点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\">    <span class=\"comment\">//如果x的上一个结点是空结点的话，那么说明x是头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将x的前后节点相连双向链表</span></span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        <span class=\"comment\">//x的属性置空</span></span><br><span class=\"line\">        x.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果x的下一个结点是空结点的话，那么说明x是尾结点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将x的前后节点相连   双向链表</span></span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//指向null  方便GC回收</span></span><br><span class=\"line\">    x.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Deque-gt-remove\"><a href=\"#Deque-gt-remove\" class=\"headerlink\" title=\"Deque-&gt;remove\"></a>Deque-&gt;remove</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> removeFirst();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unlinkFirst(f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">unlinkFirst</span><span class=\"params\">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> E element = f.item;</span><br><span class=\"line\">    <span class=\"comment\">//获取到头结点的下一个结点      </span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; next = f.next;</span><br><span class=\"line\">    <span class=\"comment\">//GC</span></span><br><span class=\"line\">    f.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    f.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//头指针指向的是头结点的下一个结点</span></span><br><span class=\"line\">    first = next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        next.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双端链表-队列Queue\"><a href=\"#双端链表-队列Queue\" class=\"headerlink\" title=\"双端链表(队列Queue)\"></a>双端链表(队列Queue)</h2><p><strong><em>java中队列的实现就是LinkedList： 我们之所以说LinkedList 为双端链表，是因为他实现了Deque 接口；我们知道，队列是先进先出的，添加元素只能从队尾添加，删除元素只能从队头删除，Queue中的方法就体现了这种特性。 支持队列的一些操作，我们来看一下有哪些方法实现：</em></strong></p>\n<ul>\n<li>pop() 是栈结构的实现类的方法，返回的是栈顶元素，并且将栈顶元素删除</li>\n<li>poll() 是队列的数据结构，获取对头元素并且删除队头元素</li>\n<li>push() 是栈结构的实现类的方法，把元素压入到栈中</li>\n<li>peek() 获取队头元素 ，但是不删除队列的头元素</li>\n<li>offer() 添加队尾元素</li>\n</ul>\n<h3 id=\"队列增加\"><a href=\"#队列增加\" class=\"headerlink\" title=\"队列增加\"></a>队列增加</h3><p><em>offer()添加队尾元素</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">offer</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"队列删除\"><a href=\"#队列删除\" class=\"headerlink\" title=\"队列删除\"></a>队列删除</h3><p><em>poll()是队列的数据结构，获取对头元素并且删除队头元素</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">poll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : unlinkFirst(f);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"队列查询\"><a href=\"#队列查询\" class=\"headerlink\" title=\"队列查询\"></a>队列查询</h3><p><em>peek()获取队头元素 ，但是不删除队列的头元素</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : f.item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"栈的增\"><a href=\"#栈的增\" class=\"headerlink\" title=\"栈的增\"></a>栈的增</h3><p><em>push（）是栈结构的实现类的方法，把元素压入到栈中<br> push（） 方法的底层实现，其实就是调用了 addFirst（Object o）</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    addFirst(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"栈的删\"><a href=\"#栈的删\" class=\"headerlink\" title=\"栈的删\"></a>栈的删</h3><p><em>pop（）是栈结构的实现类的方法，返回的是栈顶元素，并且将栈顶元素删除</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> removeFirst();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node f = first;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unlinkFirst(f);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["java"],"tags":["javase"]},{"title":"大家好～","url":"/2019/03/02/introduce/","content":"<p>没啥介绍的，干就完了。</p>\n<h2 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h2><h3 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h3><h4 id=\"JVM线程模型\"><a href=\"#JVM线程模型\" class=\"headerlink\" title=\"JVM线程模型\"></a><a href=\"#/\">JVM线程模型</a></h4><h4 id=\"垃圾回收器\"><a href=\"#垃圾回收器\" class=\"headerlink\" title=\"垃圾回收器\"></a>垃圾回收器</h4><h4 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h4><h4 id=\"JVM类加载机制\"><a href=\"#JVM类加载机制\" class=\"headerlink\" title=\"JVM类加载机制\"></a>JVM类加载机制</h4><h4 id=\"JVM调优工具\"><a href=\"#JVM调优工具\" class=\"headerlink\" title=\"JVM调优工具\"></a>JVM调优工具</h4><h4 id=\"GC日志分析\"><a href=\"#GC日志分析\" class=\"headerlink\" title=\"GC日志分析\"></a>GC日志分析</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">学习使我快乐</span><br></pre></td></tr></table></figure>\n\n\n\n","tags":["随笔"]},{"title":"模拟Spring框架核心逻辑","url":"/2019/11/01/myspring/","content":"","categories":["spring专题"],"tags":["spring"]},{"title":"vpn配置","url":"/2020/06/01/ot-vpn/","content":"<h2 id=\"host文件修改\"><a href=\"#host文件修改\" class=\"headerlink\" title=\"host文件修改\"></a>host文件修改</h2><p>1.windows文件目录 C:\\Windows\\System32\\drivers\\etc<br>2.mac文件目录 /etc/hosts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.168.0.25 vdi.oceandatum.com </span><br><span class=\"line\">114.80.216.162 vpn.oceandatum.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"证书下载及安装\"><a href=\"#证书下载及安装\" class=\"headerlink\" title=\"证书下载及安装\"></a>证书下载及安装</h2><h3 id=\"下载证书\"><a href=\"#下载证书\" class=\"headerlink\" title=\"下载证书\"></a>下载证书</h3><p>下载地址:<a href=\"*.oceandatum.com.cer\" title=\"证书下载\">点击下载</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ol>\n<li><p>步骤一</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step1.png\" alt=\"第一步\" title>\n                </div>\n                <div class=\"image-caption\">第一步</div>\n            </figure>\n</li>\n<li><p>步骤二</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step2.png\" alt=\"第二步\" title>\n                </div>\n                <div class=\"image-caption\">第二步</div>\n            </figure>\n</li>\n<li><p>步骤三</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step3.png\" alt=\"第三步\" title>\n                </div>\n                <div class=\"image-caption\">第三步</div>\n            </figure>\n</li>\n<li><p>步骤四</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step4.png\" alt=\"第四步\" title>\n                </div>\n                <div class=\"image-caption\">第四步</div>\n            </figure>\n</li>\n<li><p>步骤五</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step5.png\" alt=\"第五步\" title>\n                </div>\n                <div class=\"image-caption\">第五步</div>\n            </figure>\n</li>\n<li><p>步骤六</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step6.png\" alt=\"第六步\" title>\n                </div>\n                <div class=\"image-caption\">第六步</div>\n            </figure>\n\n</li>\n</ol>\n<h2 id=\"登陆vpn\"><a href=\"#登陆vpn\" class=\"headerlink\" title=\"登陆vpn\"></a>登陆vpn</h2><ol>\n<li><p>浏览器输入 <a href=\"https://vpn.oceandatum.com:1723\" target=\"_blank\" rel=\"noopener\">https://vpn.oceandatum.com:1723</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step7.png\" alt=\"输入账号登陆\" title>\n                </div>\n                <div class=\"image-caption\">输入账号登陆</div>\n            </figure>\n</li>\n<li><p>点击Network Access Connect with the Netscaler Gateway Plug-in</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step8.png\" alt=\"登陆成功图\" title>\n                </div>\n                <div class=\"image-caption\">登陆成功图</div>\n            </figure>\n</li>\n<li><p>当出现下列界面，说明当前网络连接已经可以访问公司内部系统。尽量不要关闭该页面，如果想要退出VPN，点击右边的LogOff即可</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/06/01/ot-vpn/step9.png\" alt=\"登陆成功图\" title>\n                </div>\n                <div class=\"image-caption\">登陆成功图</div>\n            </figure>\n\n\n\n</li>\n</ol>\n","categories":["奥腾"],"tags":["vpn"]},{"title":"JVM虚拟机","url":"/2020/03/15/jvm/","content":"<p>java虚拟机(java virtual machine，JVM)，一种能够运行java字节码的虚拟机。作为一种编程语言的虚拟机，实际上不只是专用于Java语言，只要生成的编译文件匹配JVM对加载编译文件格式要求，任何语言都可以由JVM编译运行。比如kotlin、scala等。</p>\n<h2 id=\"JVM组成\"><a href=\"#JVM组成\" class=\"headerlink\" title=\"JVM组成\"></a>JVM组成</h2><p>JVM的主要由三部分组成</p>\n<ul>\n<li>类加载子系统</li>\n<li>运行时数据区（内存结构）</li>\n<li>执行引擎<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/jvm.jpg\" alt=\"jvm结构\" title>\n                </div>\n                <div class=\"image-caption\">jvm结构</div>\n            </figure>\n\n\n\n\n</li>\n</ul>\n<h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/lifecircle.jpg\" alt=\"生命周期\" title>\n                </div>\n                <div class=\"image-caption\">生命周期</div>\n            </figure>\n<ol>\n<li>加载<br> <em>将class文件读取到内存</em></li>\n<li>连接<br> 2.1 验证<br> <em>验证字节码文件的正确性</em><br> 2.2  准备<br> <em>给类的静态变量分配内存，并赋予默认值</em><br> 2.3 解析<br> <em>类装载器装入类所引用的其它所有类</em></li>\n<li>初始化<br> <em>为类的静态变量赋予正确的初始值，上述的准备阶段为静态变量赋予的是虚拟机默认的初始值，此处赋予的才是程序编写者为变量分配的真正的初始值，执行静态代码块</em></li>\n<li>使用</li>\n<li>卸载</li>\n</ol>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><ul>\n<li>启动类加载器(Bootstrap ClassLoader)<br>  <em>负责加载JRE的核心类库，如JRE目标下的rt.jar，charsets.jar等</em></li>\n<li>扩展类加载器(Extension ClassLoader)<br>  <em>负责加载JRE扩展目录ext中jar类包</em></li>\n<li>系统类加载器(Application ClassLoader)<br>  <em>负责加载ClassPath路径下的类包</em></li>\n<li>用户自定义加载器(User ClassLoader)<br>  <em>负责加载用户自定义路径下的类包</em><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/classLoader.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n\n</li>\n</ul>\n<h2 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h2><ol>\n<li>全盘负责委托机制<br> <em>当一个ClassLoader加载一个类的时候，除非显示的使用另一个ClassLoader，该类所依赖和引用的类也由这个ClassLoader载入</em></li>\n<li>双亲委派机制<br> <em>指先委托父类加载器寻找目标类，在找不到的情况下才会到自己的路径中查找并载入目标类</em><br>双亲委派的优势<ul>\n<li><em>沙箱安全机制：比如自己写的String.class类不会被加载，这样可以防止核心库被随意篡改</em></li>\n<li><em>避免类的重复加载：当父ClassLoader已经加载了该类的时候，就不需要子ClassLoader再加载一次</em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h2><ol>\n<li><p>方法区（Method Area）<br> <em>类的所有字段和方法字节码，以及一些特殊方法如构造函数，接口代码也在这里定义。简单来说，所有定义的方法的信息都保存在该区域，静态变量+常量+类信息（构造方法/接口定义）+运行时常量池都存在方法区中，虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是为了和Java的堆区分开(jdk1.8以前hotspot虚拟机叫永久代、持久代，jdk1.8时叫元空间)</em></p>\n</li>\n<li><p>堆（Heap）<br> <em>虚拟机启动时自动分配创建，用于存放对象的实例，几乎所有对象都在堆上分配内存，当对象无法在该空间申请到内存是将抛出OutOfMemoryError异常。同时也是垃圾收集器管理的主要区域。</em></p>\n<p> 2.1 新生代<br> <em>类出生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。新生代分为两部分：伊甸区（Eden space）和幸存者区（Survivor space），所有的类都是在伊甸区被new出来的。幸存区又分为From和To区。当Eden区的空间用完是，程序又需要创建对象，JVM的垃圾回收器将Eden区进行垃圾回收（Minor GC），将Eden区中的不再被其它对象应用的对象进行销毁。然后将Eden区中剩余的对象移到From Survivor区。若From Survivor区也满了，再对该区进行垃圾回收，然后移动到To Survivor区。</em><br> 2.2 老年代<br> <em>新生代经过多次GC仍然存货的对象移动到老年区。若老年代也满了，这时候将发生Major GC（也可以叫Full GC），进行老年区的内存清理。若老年区执行了Full GC之后发现依然无法进行对象的保存，就会抛出OOM（OutOfMemoryError）异常</em><br> 2.3 元空间<br> <em>在JDK1.8之后，元空间替代了永久代，它是对JVM规范中方法区的实现，区别在于元数据区不在虚拟机当中，而是用的本地内存，永久代在虚拟机当中，永久代逻辑结构上也属于堆，但是物理上不属于。</em></p>\n</li>\n<li><p>栈 (Stack)<br> <em>Java线程执行方法的内存模型，一个线程对应一个栈，每个方法在执行的同时都会创建一个栈帧（用于存储局部变量表，操作数栈，动态链接，方法出口等信息）不存在垃圾回收问题，只要线程一结束该栈就释放，生命周期和线程一致</em></p>\n</li>\n<li><p>本地方法栈 (Native Method Stack)<br> <em>类似栈，java栈服务于java方法，而本地方法栈服务于native方法。</em></p>\n</li>\n<li><p>程序计数器 (Program Counter Register)<br> <em>就是一个指针，指向下一跳指令的地址，就是即将要执行的指令，由执行引擎进行读取，所占的内存空间很小，几乎可以忽略不计</em></p>\n</li>\n</ol>\n","categories":["java"],"tags":["JVM"]},{"title":"Spring核心概念（源码相关）","url":"/2020/10/17/spring%E6%BA%90%E7%A0%81%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","content":"<p><strong><em>本文主要讲解Spring源码中经常看到的类的作用，中间会有会有部分代码讲解，各模块的具体源码会写在后面的文章中</em></strong></p>\n<h2 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a>BeanDefinition</h2><p><em>BeanDefinition中保存了我们Bean的信息。声名式bean的定义下面三种方式</em></p>\n<ol>\n<li><bean> xml配置</bean></li>\n<li>@Bean</li>\n<li>@Component</li>\n</ol>\n<p><em>spring 在读取bean配置信息后会给bean配置生成对应的BeanDefinition象对象存储类信息供spring生产bean使用。我们也可以直接使用beanDefinition生成一个bean。</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">     AnnotationConfigApplicationContext applicationContext = </span><br><span class=\"line\">                <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">     <span class=\"comment\">// 获取beanDefinition对象</span></span><br><span class=\"line\">     AbstractBeanDefinition beanDefinition = </span><br><span class=\"line\">                BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();</span><br><span class=\"line\">     <span class=\"comment\">// 写入需要生产的bean</span></span><br><span class=\"line\">     beanDefinition.setBeanClass(People<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 注册到spring容器中</span></span><br><span class=\"line\">     applicationContext.registerBeanDefinition(<span class=\"string\">\"myBean\"</span>,beanDefinition);</span><br><span class=\"line\">     <span class=\"comment\">// 刷新容器</span></span><br><span class=\"line\">     applicationContext.refresh();</span><br><span class=\"line\">     <span class=\"comment\">// 获取bean</span></span><br><span class=\"line\">     System.out.println(applicationContext.getBean(People<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\">     System.out.println(applicationContext.getBean(<span class=\"string\">\"myBean\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"comment\">//spring.bean.People@1ce92674</span></span><br><span class=\"line\"><span class=\"comment\">//spring.bean.People@1ce92674</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"BeanDefinitionReader\"><a href=\"#BeanDefinitionReader\" class=\"headerlink\" title=\"BeanDefinitionReader\"></a>BeanDefinitionReader</h2><p><em>顾名思义，这个类的作用就是读取类配置。它主有很多实现类，例如XmlBeanDefinitionReader 读取的就是<bean>方式配置</bean></em></p>\n<h3 id=\"XmlBeanDefinitionReader\"><a href=\"#XmlBeanDefinitionReader\" class=\"headerlink\" title=\"XmlBeanDefinitionReader\"></a>XmlBeanDefinitionReader</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span> <span class=\"attr\">default-autowire</span>=<span class=\"string\">\"byName\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"people\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spring.bean.People\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  AnnotationConfigApplicationContext applicationContext = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">  <span class=\"comment\">//创建beanDefinitionReader</span></span><br><span class=\"line\">  XmlBeanDefinitionReader beanDefinitionReader = <span class=\"keyword\">new</span> XmlBeanDefinitionReader(applicationContext);</span><br><span class=\"line\">  <span class=\"comment\">//通过xml文件加载bean到applicationContext 返回值为读取到bean的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = beanDefinitionReader.loadBeanDefinitions(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">  System.out.println(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"AnnotatedBeanDefinitionReader\"><a href=\"#AnnotatedBeanDefinitionReader\" class=\"headerlink\" title=\"AnnotatedBeanDefinitionReader\"></a>AnnotatedBeanDefinitionReader</h3><p><em>注意:这个类并不是解析被@Bean,@Component注解修饰等类,而是解析需要加载的类的一些配置信息如:@Scope,@Lazy</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Scope</span>(<span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    AnnotationConfigApplicationContext applicationContext = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">    <span class=\"comment\">//创建beanDefinitionReader </span></span><br><span class=\"line\">    AnnotatedBeanDefinitionReader beanDefinitionReader = <span class=\"keyword\">new</span> AnnotatedBeanDefinitionReader(applicationContext);</span><br><span class=\"line\">    <span class=\"comment\">//通过xml文件加载bean到applicationContext 返回值为读取到bean的数量</span></span><br><span class=\"line\">    beanDefinitionReader.registerBean(People<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    applicationContext.refresh();</span><br><span class=\"line\">    System.out.println(applicationContext.getBean(<span class=\"string\">\"people\"</span>));</span><br><span class=\"line\">    System.out.println(applicationContext.getBean(<span class=\"string\">\"people\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\"><span class=\"comment\">// spring.bean.People@5ae50ce6</span></span><br><span class=\"line\"><span class=\"comment\">//  spring.bean.People@6f96c77</span></span><br></pre></td></tr></table></figure>\n<p><em>*People.class设置它的作用范围为原型。从结果上面可看出两次得到的People对象确实是不同的</em></p>\n<h3 id=\"ClassPathBeanDefinitionScanner\"><a href=\"#ClassPathBeanDefinitionScanner\" class=\"headerlink\" title=\"ClassPathBeanDefinitionScanner\"></a>ClassPathBeanDefinitionScanner</h3><p><em>通过包扫描注解解析@Component（@Bean注解不会bei扫描）</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">   AnnotationConfigApplicationContext applicationContext = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">   ClassPathBeanDefinitionScanner classPathBeanDefinitionScanner = <span class=\"keyword\">new</span> ClassPathBeanDefinitionScanner(applicationContext);</span><br><span class=\"line\">   classPathBeanDefinitionScanner.scan(<span class=\"string\">\"spring.bean\"</span>);</span><br><span class=\"line\">   applicationContext.refresh();</span><br><span class=\"line\">   System.out.println(applicationContext.getBean(People<span class=\"class\">.<span class=\"keyword\">class</span>))</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果</span></span><br><span class=\"line\"><span class=\"comment\">// spring.bean.People@74fe5c40</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h2><p><em>Spring中有很多种BeanFactory,本文以它中比较核心的实现类DefaultListableBeanFactory讲解</em></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/10/17/spring%E6%BA%90%E7%A0%81%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/DefaultListableBeanFactory.png\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><em>DefaultListableBeanFactory实现了很多接口表示拥有很多功能</em></p>\n<ul>\n<li>AliasRegistry:支持别名功能，一个名字可以对应多个别名</li>\n<li>BeanDefinitionRegistry: 可以注册、保存、移除、获取某个BeanDefinition</li>\n<li>BeanFactory：可以根据bean的名字、类型、别名获取Bean对象</li>\n<li>SingletonBeanRegistry: 可以直接注册、获取单例bean</li>\n</ul>\n","categories":["spring源码"],"tags":["spring"]},{"title":"Spring容器及Spring Bean","url":"/2019/12/01/springioc/","content":"<h2 id=\"Spring容器\"><a href=\"#Spring容器\" class=\"headerlink\" title=\"Spring容器\"></a>Spring容器</h2><h3 id=\"什么是容器\"><a href=\"#什么是容器\" class=\"headerlink\" title=\"什么是容器\"></a>什么是容器</h3><p>官网解释</p>\n<p><strong><em>The org.springframework.context.ApplicationContext interface represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the beans.</em></strong></p>\n<p>翻译内容: </p>\n<ol>\n<li>Spring IOC容器就是一个org.springframework.context.ApplicationContext的实例化对象</li>\n<li>容器负责了实例化，配置以及装配一个bean</li>\n</ol>\n<p>总结:</p>\n<ul>\n<li>代码层面:Spring容器是实现了ApplicationContext接口的对象。</li>\n<li>功能层面:Spring容器是Spring框架的核心,作用是管理对象。容器会创建对象,连接对象,并管理它们整个生命周期(创建到销毁).</li>\n</ul>\n<h3 id=\"容器如何工作\"><a href=\"#容器如何工作\" class=\"headerlink\" title=\"容器如何工作\"></a>容器如何工作</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/12/01/springioc/springioc.png\" alt=\"官网介绍\" title>\n                </div>\n                <div class=\"image-caption\">官网介绍</div>\n            </figure>\n\n<p><strong><em>Spring容器通过我们提交的POJO对象以及配置元数据产生一个充分配置的可以使用的系统。这里说的配置元数据，实际上我们就是我们提供的XML配置文件，或者通过注解方式提供的一些配置信息</em></strong></p>\n<h2 id=\"Spring-Bean\"><a href=\"#Spring-Bean\" class=\"headerlink\" title=\"Spring Bean\"></a>Spring Bean</h2><h3 id=\"实例化bean\"><a href=\"#实例化bean\" class=\"headerlink\" title=\"实例化bean\"></a>实例化bean</h3><h4 id=\"构造器创建\"><a href=\"#构造器创建\" class=\"headerlink\" title=\"构造器创建\"></a>构造器创建</h4><ol>\n<li>无参构造器<br>使用空构造器进行定义，使用此种方式，class属性指定的类必须有空构造器<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean name=<span class=\"string\">\"people\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.zzf.entity.People\"</span>&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>\n<li>有参构造器<br>使用<constructor-arg>标签指定构造器参数值，其中index表示位置，value表示常量值，也可以指定引用，指定引用使用ref来引用另一个Bean定义.<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean name=<span class=\"string\">\"people2\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.zzf.entity.People\"</span>&gt;</span><br><span class=\"line\">    &lt;constructor-arg index=\"0\" value=\"zzf\"&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">    &lt;constructor-arg index=\"1\" value=\"18\"&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">    &lt;constructor-arg index=\"2\" ref=\"collection\"&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态工厂方法创建\"><a href=\"#静态工厂方法创建\" class=\"headerlink\" title=\"静态工厂方法创建\"></a>静态工厂方法创建</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">//getter setter 方法省略....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleFactoty</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> People <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean name=<span class=\"string\">\"people3\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.zzf.factory.PeopleFactory\"</span> </span><br><span class=\"line\">    factory-method=<span class=\"string\">\"newInstance\"</span>&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实例工厂方法创建\"><a href=\"#实例工厂方法创建\" class=\"headerlink\" title=\"实例工厂方法创建\"></a>实例工厂方法创建</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">//getter setter 方法省略....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeopleFactoty1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> People <span class=\"title\">newInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> People();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean name=<span class=\"string\">\"peopleFactoty1\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"com.zzf.factory.PeopleFactoty1\"</span>&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\">&lt;bean name=<span class=\"string\">\"people3\"</span>  factory-bean=<span class=\"string\">\"peopleFactoty1\"</span></span><br><span class=\"line\">    factory-method=<span class=\"string\">\"newInstance\"</span>&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n\n</constructor-arg></li>\n</ol>\n<h3 id=\"源码查看\"><a href=\"#源码查看\" class=\"headerlink\" title=\"源码查看\"></a>源码查看</h3><ol>\n<li>实例化容器<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        ApplicationContext applicationContext &#x3D;</span><br><span class=\"line\">                new ClassPathXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);</span><br><span class=\"line\">        People people &#x3D; applicationContext.getBean(People.class);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2019/12/01/springioc/断点调试.png\" alt=\"断点调试\" title>\n                </div>\n                <div class=\"image-caption\">断点调试</div>\n            </figure></li>\n<li>源码分析<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实例化bean</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> beanName</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mbd</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> BeanWrapper <span class=\"title\">createBeanInstance</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, Object[] args)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//获取这个bean的class属性，确保beanDefinition中beanClass属性已经完成解析</span></span><br><span class=\"line\">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\">    <span class=\"comment\">//对象是否可以创建异常判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanClass != <span class=\"keyword\">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                <span class=\"string\">\"Bean class isn't public, and non-public access not allowed: \"</span> + beanClass.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过FactoryMethod实例化这个bean</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.getFactoryMethodName() != <span class=\"keyword\">null</span>)  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//这段代码都是在通过构造函数实例化这个Bean,分两种情况，</span></span><br><span class=\"line\">    <span class=\"comment\">//一种是通过默认的无参构造，</span></span><br><span class=\"line\">    <span class=\"comment\">//一种是通过推断出来的构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> resolved = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> autowireNecessary = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                resolved = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resolved) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (autowireNecessary) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 推断合适的构造方法集合</span></span><br><span class=\"line\">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctors != <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class=\"line\">            mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 没有特殊处理默认使用无参构造器创建</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["spring专题"],"tags":["spring"]},{"title":"synchronized锁状态及性能对比","url":"/2020/04/01/synchronized/","content":"<h2 id=\"锁状态\"><a href=\"#锁状态\" class=\"headerlink\" title=\"锁状态\"></a>锁状态</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>无锁<br> <em>没有synchronized关键字修饰</em></li>\n<li>偏向锁<br>  <em>JVM开启偏向锁时只有单个线程调用同步代码（不存在竞争条件）且无法重新偏向（单个锁情况，不考虑批量重偏向^[t1线程实例化同一个类多个对象并加锁，t2线程也对其加锁 由于锁升级会进行多次锁撤销操作，JVM会认为接下来的对象需要批量重偏向而不是进行锁升级为轻量级]</em></li>\n<li>轻量级锁<br>  <em>多个线程调用同步代码，但是线程之间交替执行例如调用join().-自旋锁也是产生轻量级锁的一个方式</em></li>\n<li>重量级锁<br>  <em>多个线程调用同步代码，且存在锁竞争</em></li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><h4 id=\"对象头介绍\"><a href=\"#对象头介绍\" class=\"headerlink\" title=\"对象头介绍\"></a>对象头介绍</h4><p>   <em>锁状态的标记就在对象头当中。网上32位操作系统对象头的文档很多，下面使用的是64位操作系统介绍</em></p>\n<h5 id=\"对象头的组成-mark-Word\"><a href=\"#对象头的组成-mark-Word\" class=\"headerlink\" title=\"对象头的组成-mark Word\"></a>对象头的组成-mark Word</h5><p><em>这部分主要用来存储对象自身的运行时数据，如hashcode、gc分代年龄等，32位操作系统和64位操作系统的位长度是不一样的，具体看图:</em></p>\n<pre><code>                             32位操作系统\n|------------------------------------------------|-------------------| \n|                  Mark Word (32 bits)           |       State       |\n|------------------------------------------------|-------------------|\n| identity_hashcode:25|age:4|biased_lock:1|lock:2|       Normal      |\n|------------------------------------------------|-------------------|\n| thread:23 | epoch:2|age:4|biased_lock:1 |lock:2|       Biased      |\n|------------------------------------------------|-------------------|\n|           ptr_to_lock_record:30         |lock:2|Lightweight Locked |\n|------------------------------------------------|-------------------|\n|       ptr_to_heavyweight_monitor:30     |lock:2| Heavyweight Locked|\n|------------------------------------------------|-------------------|\n|                                         |lock:2|    Marked for GC  |\n|------------------------------------------------|-------------------|</code></pre><hr>\n<pre><code>                                    64位操作系统   \n|-------------------------------------------------------------------|-------------------|\n|                  Mark Word (64 bits)                              |       State       |\n|-------------------------------------------------------------------|-------------------|\n| unused:25|identity_hashcode:31|unused:1|age:4|biased_lock:1|lock:2|       Normal      |\n|------------------------------------------------------------|------|-------------------|\n| thread:54|     epoch:2        |unused:1|age:4|biased_lock:1|lock:2|       Biased      |\n|------------------------------------------------------------|------|-------------------|\n|                           ptr_to_lock_record:62            |lock:2|Lightweight Locked |\n|----------------------------------------------------------- |------|-------------------|\n|                        ptr_to_heavyweight_monitor:62       |lock:2| Heavyweight Locked|\n|------------------------------------------------------------|------|-------------------|\n|                                                            |lock:2|    Marked for GC  |\n|---------------------------------------------------------------------------------------|</code></pre><h4 id=\"JOL工具\"><a href=\"#JOL工具\" class=\"headerlink\" title=\"JOL工具\"></a>JOL工具</h4><p>   JOL全称为Java Object Layout，是分析JVM中对象布局的工具，该工具大量使用了Unsafe、JVMTI来解码布局情况，分析结果是比较精准。使用时直接引入maven依赖即可</p>\n<pre><code>&lt;!--java状态分析工具--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;\n    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;\n    &lt;version&gt;0.9&lt;/version&gt;\n&lt;/dependency&gt;</code></pre><h4 id=\"偏向锁代码\"><a href=\"#偏向锁代码\" class=\"headerlink\" title=\"偏向锁代码\"></a>偏向锁代码</h4><pre><code>- JVM偏向锁延迟： JVM启动有大量的同步操作，偏向锁的锁消除性能很差所以JVM启动时会延迟偏向锁的启用。\n- 对象进行hashcode以后 就不存在偏向锁 这和对象头的设计有关\n- 偏向锁开启后新建对象 会有一个可偏向状态 但是指向的线程号为空 体现为二机制 0\n\n/**\n * 由于在jvm启动时会延迟开启偏向锁 所以使用Thread.sleep(5000)\n * 设置JVM启动参数 -XX:BiasedLockingStartupDelay=0 延迟偏向锁时间0\n */\npublic class Demo1 {\n    public static void main(String[] args) throws InterruptedException {\n        //睡眠5秒 使得偏向锁开启 也可以设置启动参数 \n        //-XX:BiasedLockingStartupDelay=0 延迟偏向锁时间0\n        Thread.sleep(5000);\n        A a = new A();\n        System.out.println(&quot;锁之前&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n        Thread thread = new Thread(){\n            @Override\n            public void run() {\n                synchronized (a){\n                    System.out.println(&quot;锁状态&quot;);\n                    System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                }\n            }\n        };\n        thread.start();\n        System.out.println(&quot;锁之后&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n    }\n}\n\n\n\n结果\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 d0 11 1b (00000101 11010000 00010001 00011011) (454152197)\n      4     4        (object header)                           e6 7f 00 00 (11100110 01111111 00000000 00000000) (32742)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 d0 11 1b (00000101 11010000 00010001 00011011) (454152197)\n      4     4        (object header)                           e6 7f 00 00 (11100110 01111111 00000000 00000000) (32742)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n结果分别为 101+0 偏向锁状态 101+pid 偏向锁 101+pid偏向锁，后面两次打印结果中可以看到锁指向线程id是相同。 </code></pre><h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><pre><code>public class Demo2 {\n\n    //JVM启动设置关闭偏向锁延迟\n    public static void main(String[] args) throws InterruptedException {\n\n        A a = new A();\n        System.out.println(&quot;锁之前&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n        Thread thread = new Thread(){\n            @Override\n            public void run() {\n                synchronized (a){\n                    System.out.println(&quot;线程锁状态&quot;);\n                    System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                }\n            }\n        };\n\n        /**\n         * 主线程先拿锁 执行完成启动第二个线程 否则会产出重量级锁\n         */\n        synchronized (a){\n            System.out.println(&quot;主线程锁状态&quot;);\n            System.out.println(ClassLayout.parseInstance(a).toPrintable());\n        }\n\n        thread.start();\n\n        System.out.println(&quot;锁之后&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n    }\n}\n\n结果\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n主线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 18 00 7a (00000101 00011000 00000000 01111010) (2046826501)\n      4     4        (object header)                           8d 7f 00 00 (10001101 01111111 00000000 00000000) (32653)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\n线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           f8 c8 12 0f (11111000 11001000 00010010 00001111) (252889336)\n      4     4        (object header)                           00 70 00 00 (00000000 01110000 00000000 00000000) (28672)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           f8 c8 12 0f (11111000 11001000 00010010 00001111) (252889336)\n      4     4        (object header)                           00 70 00 00 (00000000 01110000 00000000 00000000) (28672)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\n结果分别为 101+0 偏向锁状态 101+pid 偏向锁 000 轻量级锁 000 轻量级锁</code></pre><h4 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h4><pre><code>/**\n * 代码与轻量级锁的代码区别为thread.start()方法调用放到主线程加锁之前 使多个线程之间存在锁竞争\n *（自选状态之外）升级重量级锁\n */\n public class Demo3 {\n\n     //JVM启动设置关闭偏向锁延迟\n     public static void main(String[] args) throws InterruptedException {\n\n         A a = new A();\n         System.out.println(&quot;锁之前&quot;);\n         System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n         Thread thread = new Thread(){\n             @Override\n             public void run() {\n                 synchronized (a){\n                     System.out.println(&quot;线程锁状态&quot;);\n                     System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                 }\n             }\n         };\n\n         thread.start();\n         /**\n          * 主线程先拿锁 执行完成启动第二个线程 否则会产出重量级锁\n          */\n         synchronized (a){\n             System.out.println(&quot;主线程锁状态&quot;);\n             System.out.println(ClassLayout.parseInstance(a).toPrintable());\n         }\n\n\n\n         System.out.println(&quot;锁之后&quot;);\n         System.out.println(ClassLayout.parseInstance(a).toPrintable());\n     }\n }\n结果：\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n主线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\n线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\n\n 结果分别为001 无锁 010 重量级锁 010重量级锁 010 重量级锁 （锁只会进行升级和锁释放，不会降级）</code></pre><h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><pre><code>//JVM启动设置关闭偏向锁延迟 -XX:BiasedLockingStartupDelay=0\npublic class Demo4 {\n    public Long max = 1000000000L;\n\n    public static void main(String[] args) throws InterruptedException {\n        Demo4 demo4 = new Demo4();\n        long start = System.currentTimeMillis();\n        while (demo4.max&gt;0){\n            demo4.run1();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(String.format(&quot;%sms&quot;, end -start));\n    }\n    public synchronized void run1(){\n\n       max--;\n    }\n}\n执行结果 4294ms</code></pre><h3 id=\"轻量级锁-1\"><a href=\"#轻量级锁-1\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><pre><code>代码同上 将偏向锁延迟开启即可\n结果  19682ms</code></pre><h3 id=\"重量级锁-1\"><a href=\"#重量级锁-1\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h3><pre><code> public class Demo5 {\n     public CountDownLatch countDownLatch = new CountDownLatch(1000000000);\n     public static void main(String[] args) throws InterruptedException {\n         Demo5 demo4 = new Demo5();\n         long start = System.currentTimeMillis();\n         for (int i=0;i&lt;2;i++){\n             Thread thread = new Thread(){\n                 @Override\n                 public void run() {\n                     while (demo4.countDownLatch.getCount()&gt;0){\n                         demo4.run1();\n                     }\n                 };\n             };\n             thread.start();\n         }\n         demo4.countDownLatch.await();\n         long end = System.currentTimeMillis();\n         System.out.println(String.format(&quot;%sms&quot;, end -start));\n     }\n     public synchronized void run1(){\n\n         countDownLatch.countDown();\n     }\n }\n结果:44597ms</code></pre><p><em>对象头的介绍在下次具体介绍推荐直接到oracle官网查看介绍</em></p>\n","categories":["java"],"tags":["javase","并发"]},{"title":"类加载器子系统","url":"/2020/08/09/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/","content":"<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><p>  <em>JVM中有两种类型的类加载器，由C++编写的及由Java编写的。除了启动类加载器（Bootstrap Class Loader）是由C++编写的，其他都是由Java编写的。由Java编写的类加载器都继承自类java.lang.ClassLoader。各种类加载器之间存在逻辑上的父子关系，后面可以通过代码查看。</em><br>    <img src=\"/2020/08/09/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB.jpg\" alt=\"类加载器父子关系\"></p>\n<h3 id=\"启动类加载器\"><a href=\"#启动类加载器\" class=\"headerlink\" title=\"启动类加载器\"></a>启动类加载器</h3><p>  <em>因为启动类加载器是由C++编写的，通过Java程序去查看显示的是null，因此，启动类加载器无法被Java程序调用启动类加载器不像其他类加载器有实体，它是没有实体的，JVM将C++处理类加载的一套逻辑定义为启动类加载器。</em></p>\n<pre><code>/**\n * 查看类加载器的默认加载路径  也可以通过-Xbootclasspath 自行指定\n */\n public class ClassLoaderTest2 {\n\n    public static void main(String[] args) {\n        URL[] urls = Launcher.getBootstrapClassPath().getURLs();\n        for (URL url:urls){\n            System.out.println(url);\n        }\n    }\n }\n 结果为固定路径:\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/resources.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/rt.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/sunrsasign.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/jsse.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/jce.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/charsets.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/jfr.jar\n file:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/classes</code></pre><p>   <em>启动类加载器实际上是一段c++代码逻辑 从openjdk源码体现如下:</em></p>\n<pre><code>int JNICALL\nJavaMain(void * _args)\n{\n    ……\n    mainClass = LoadMainClass(env, mode, what);\n    ……\n}\n\nstatic jclass\nLoadMainClass(JNIEnv *env, int mode, char *name)\n{\n    jmethodID mid;\n    jstring str;\n    jobject result;\n    jlong start, end;\n    jclass cls = GetLauncherHelperClass(env);\n    NULL_CHECK0(cls);\n    if (JLI_IsTraceLauncher()) {\n        start = CounterGet();\n    }\n    NULL_CHECK0(mid = (*env)-&gt;GetStaticMethodID(env, cls,\n                &quot;checkAndLoadMain&quot;,\n                &quot;(ZILjava/lang/String;)Ljava/lang/Class;&quot;));\n\n    str = NewPlatformString(env, name);\n    CHECK_JNI_RETURN_0(\n        result = (*env)-&gt;CallStaticObjectMethod(\n            env, cls, mid, USE_STDERR, mode, str));\n\n    if (JLI_IsTraceLauncher()) {\n        end   = CounterGet();\n        printf(&quot;%ld micro seconds to load main class\\n&quot;,\n               (long)(jint)Counter2Micros(end-start));\n        printf(&quot;----%s----\\n&quot;, JLDEBUG_ENV_ENTRY);\n    }\n\n    return (jclass)result;\n}\n\njclass\nGetLauncherHelperClass(JNIEnv *env)\n{\n    if (helperClass == NULL) {\n        NULL_CHECK0(helperClass = FindBootStrapClass(env,\n                &quot;sun/launcher/LauncherHelper&quot;));\n    }\n    return helperClass;\n}\n\njclass\nFindBootStrapClass(JNIEnv *env, const char* classname)\n{\n   if (findBootClass == NULL) {\n       findBootClass = (FindClassFromBootLoader_t *)dlsym(RTLD_DEFAULT,\n          &quot;JVM_FindClassFromBootLoader&quot;);\n       if (findBootClass == NULL) {\n           JLI_ReportErrorMessage(DLL_ERROR4,\n               &quot;JVM_FindClassFromBootLoader&quot;);\n           return NULL;\n       }\n   }\n   return findBootClass(env, classname);\n}\n\nJVM_ENTRY(jclass, JVM_FindClassFromBootLoader(JNIEnv* env,\n                                              const char* name))\n  JVMWrapper2(&quot;JVM_FindClassFromBootLoader %s&quot;, name);\n\n  // Java libraries should ensure that name is never null...\n  if (name == NULL || (int)strlen(name) &gt; Symbol::max_length()) {\n    // It&apos;s impossible to create this class;  the name cannot fit\n    // into the constant pool.\n    return NULL;\n  }\n\n  TempNewSymbol h_name = SymbolTable::new_symbol(name, CHECK_NULL);\n  Klass* k = SystemDictionary::resolve_or_null(h_name, CHECK_NULL);\n  if (k == NULL) {\n    return NULL;\n  }\n\n  if (TraceClassResolution) {\n    trace_class_resolution(k);\n  }\n  return (jclass) JNIHandles::make_local(env, k-&gt;java_mirror());\nJVM_END</code></pre><p>  <em>这套逻辑做的事情就是通过启动类加载器加载类sun.launcher.LauncherHelper，执行该类的方法checkAndLoadMain，加载main函数所在的类，启动扩展类加载器、应用类加载器也是在这个时候完成的</em></p>\n<h3 id=\"拓展类加载器\"><a href=\"#拓展类加载器\" class=\"headerlink\" title=\"拓展类加载器\"></a>拓展类加载器</h3><pre><code>/**\n * 查看拓展类加载路径 也可以通过java.ext.dirs指定\n */\npublic static void main(String[] args) {\n    ClassLoader classLoader = ClassLoader.getSystemClassLoader().getParent();\n    URLClassLoader urlClassLoader = (URLClassLoader) classLoader;\n    URL[] urls = urlClassLoader.getURLs();\n    for (URL url : urls) {\n        System.out.println(url);\n    }\n}\n结果:\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/sunec.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/nashorn.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/cldrdata.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/jfxrt.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/dnsns.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/localedata.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/jaccess.jar\nfile:/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home/jre/lib/ext/zipfs.jar\nfile:/System/Library/Java/Extensions/MRJToolkit.jar</code></pre><h3 id=\"应用类加载器\"><a href=\"#应用类加载器\" class=\"headerlink\" title=\"应用类加载器\"></a>应用类加载器</h3><p>   <em>默认加载用户程序的类加载器</em></p>\n<pre><code>/**\n * 查看加载路径  可以通过java.class.path指定    \n */\npublic static void main(String[] args) {\n    String[] urls = System.getProperty(&quot;java.class.path&quot;).split(&quot;:&quot;);\n    for (String url : urls) {\n        System.out.println(url);\n    }\n    System.out.println(&quot;================================&quot;);\n    URLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n    URL[] urls1 = classLoader.getURLs();\n    for (URL url : urls1) {\n        System.out.println(url);\n    }\n}\n结果为你项目本地包所在路径</code></pre><h3 id=\"自定义类加载器\"><a href=\"#自定义类加载器\" class=\"headerlink\" title=\"自定义类加载器\"></a>自定义类加载器</h3><p>   <em>继承类java.lang.ClassLoader</em></p>\n<pre><code>public class ClassLoadeTest1 extends ClassLoader{\n    public static void main(String[] args) throws ClassNotFoundException {\n        ClassLoadeTest1 classLoadeTest1 = new ClassLoadeTest1();\n        Class&lt;?&gt; aClass = classLoadeTest1.loadClass(Demo1.class.getName());\n        System.out.println(aClass);\n        System.out.println(aClass.getClassLoader());\n    }\n    @Override\n    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {\n        System.out.println(&quot;findClass&quot;);\n        return null;\n    }\n}\n结果：\n   class com.example.classloade.Demo1\n   sun.misc.Launcher$AppClassLoader@18b4aac2\n 因为类加载中的双亲委派 所以打印出的加载类为AppClassLoader 这也是自定义的默认加载器</code></pre><p>   <em>自定义类加载器也可以打破双亲委派，看源码 此处代码说明类加载器父子关系图</em></p>\n<pre><code>/**\n * 类加载过程如下 \n * 自定义加载器只需要重写loadClass 在向上委托判断初改成自己加载逻辑即打破双亲委派\n **/\n  protected Class&lt;?&gt; loadClass(String name, boolean resolve)\n     throws ClassNotFoundException{\n\n     synchronized (getClassLoadingLock(name)) {\n        //判断类是否加载过\n         Class&lt;?&gt; c = findLoadedClass(name); \n         //==null 没有加载\n         if (c == null) {\n             long t0 = System.nanoTime();\n             try {\n                 //判断是否有父级 \n                 if (parent != null) {  \n                     //有父级委托父级加载 向上委派\n                     c = parent.loadClass(name, false);\n                 } else {\n                     //没有的话直接使用启动类加载器 最后调用的是navicat方法 进入c++\n                     c = findBootstrapClassOrNull(name);\n                 }\n             } catch (ClassNotFoundException e) {\n                 // ClassNotFoundException thrown if class not found\n                 // from the non-null parent class loader\n             }\n\n             if (c == null) {\n                 // If still not found, then invoke findClass in order\n                 // to find the class.\n                 long t1 = System.nanoTime();\n                 c = findClass(name);\n\n                 // this is the defining class loader; record the stats\n                 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                 sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                 sun.misc.PerfCounter.getFindClasses().increment();\n             }\n         }\n         //类是否解析\n         if (resolve) {\n             //解析类\n             resolveClass(c);\n         }\n         return c;\n     }\n }</code></pre><h2 id=\"类加载器创建链\"><a href=\"#类加载器创建链\" class=\"headerlink\" title=\"类加载器创建链\"></a>类加载器创建链</h2><p><em>刚才已经讲了启动类加载器是没有没有实体的，只是将一段c++代码逻辑命名成启动类加载器。启动类加载器做的事情是：<br>    加载类sun.launcher.LauncherHelper<br>    执行该类的方法checkAndLoadMain<br>    启动类、扩展类、应用类加载器逻辑上的父子关系就是在这个方法的调用链中生成</em></p>\n<ol>\n<li>\\openjdk\\jdk\\src\\share\\classes\\sun\\launcher\\LauncherHelper.java 核心代码</li>\n</ol>\n<pre><code>public enum LauncherHelper {\n……\n    private static final ClassLoader scloader = ClassLoader.\n                                        getSystemClassLoader();\n……\n    public static Class&lt;?&gt; checkAndLoadMain(boolean printToStderr,\n                                            int mode,\n                                            String what) {\n        ……\n        mainClass = scloader.loadClass(cn);\n        ……</code></pre><ol start=\"2\">\n<li>\\openjdk\\jdk\\src\\share\\classes\\java\\lang\\ClassLoader.java 核心代码sun.misc.Launcher.getLauncher();</li>\n</ol>\n<pre><code>public static ClassLoader getSystemClassLoader() {\n        initSystemClassLoader();\n        if (scl == null) {\n            return null;\n        }\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            checkClassLoaderPermission(scl, Reflection.getCallerClass());\n        }\n        return scl;\n    }\n\n    private static synchronized void initSystemClassLoader() {\n        if (!sclSet) {\n            if (scl != null)\n                throw new IllegalStateException(&quot;recursive invocation&quot;);\n            sun.misc.Launcher l = sun.misc.Launcher.getLauncher();\n        ……</code></pre><ol start=\"3\">\n<li>\\openjdk\\jdk\\src\\share\\classes\\sun\\misc\\Launcher.java </li>\n</ol>\n<pre><code>核心代码：\n• private static Launcher launcher = new Launcher();\n• extcl = ExtClassLoader.getExtClassLoader();\n• loader = AppClassLoader.getAppClassLoader(extcl);\n• Thread.currentThread().setContextClassLoader(loader);//设置当前线程上下文类加载器\n\npublic class Launcher {\n    private static URLStreamHandlerFactory factory = new Factory();\n    private static Launcher launcher = new Launcher();\n    private static String bootClassPath =\n        System.getProperty(&quot;sun.boot.class.path&quot;);\n\n    public static Launcher getLauncher() {\n        return launcher;\n    }\n\n    private ClassLoader loader;\n\n    public Launcher() {\n        // Create the extension class loader\n        ClassLoader extcl;\n        try {\n            extcl = ExtClassLoader.getExtClassLoader();\n        } catch (IOException e) {\n            throw new InternalError(\n                &quot;Could not create extension class loader&quot;, e);\n        }\n\n        // Now create the class loader to use to launch the application\n        try {\n            loader = AppClassLoader.getAppClassLoader(extcl);\n        } catch (IOException e) {\n            throw new InternalError(\n                &quot;Could not create application class loader&quot;, e);\n        }\n\n        // Also set the context class loader for the primordial thread.\n\n        Thread.currentThread().setContextClassLoader(loader);\n    ……</code></pre><ol start=\"4\">\n<li>扩展类加载器的创建流程</li>\n</ol>\n<pre><code> public static ExtClassLoader getExtClassLoader() throws IOException{\n     ……\n       return new ExtClassLoader(dirs);\n     ……\n\n//第二个参数传的是null，其实就是parent=null\npublic ExtClassLoader(File[] dirs) throws IOException {\n          super(getExtURLs(dirs), null, factory);\n      }\n URLClassLoader(URL[] urls, ClassLoader parent,\n                 AccessControlContext acc) {</code></pre><ol start=\"5\">\n<li>应用类加载器的创建流程</li>\n</ol>\n<pre><code>public static ClassLoader getAppClassLoader(final ClassLoader extcl)\n            throws IOException {\n    final String s = System.getProperty(&quot;java.class.path&quot;);\n    final File[] path = (s == null) ? new File[0] : getClassPath(s);\n\n    // Note: on bugid 4256530\n    // Prior implementations of this doPrivileged() block supplied\n    // a rather restrictive ACC via a call to the private method\n    // AppClassLoader.getContext().This proved overly restrictive\n    // when loading  classes.Specifically it prevent\n    // accessClassInPackage.sun.* grants from being honored.\n    //\n    return AccessController.doPrivileged(\n        new PrivilegedAction&lt;AppClassLoader&gt;() {\n            public AppClassLoader run() {\n                URL[] urls =\n                    (s == null) ? new URL[0] : pathToURLs(path);\n                return new AppClassLoader(urls, extcl);\n            }\n        });\n}\n\nAppClassLoader(URL[] urls, ClassLoader parent) {\n    super(urls, parent, factory);\n}</code></pre><p>   <em>应用类、扩展类加载器的父子关系就是这样建立的.</em></p>\n<h2 id=\"类加载器加载完成后的存储\"><a href=\"#类加载器加载完成后的存储\" class=\"headerlink\" title=\"类加载器加载完成后的存储\"></a>类加载器加载完成后的存储</h2><p>   <em>类加载完成会存储在方法区 而不同的类加载器加载的类都有其相对应的一块区域。如果不同的加载器加载了同一个class 那么他们是两份数据当然也不是同一个类了</em></p>\n<h2 id=\"双亲委派\"><a href=\"#双亲委派\" class=\"headerlink\" title=\"双亲委派\"></a>双亲委派</h2><p>   <em>如果一个类加载器收到了加载某个类的请求,则该类加载器并不会去加载该类,而是把这个请求委派给父类加载器,每一个层次的类加载器都是如此,因此所有的类加载请求最终都会传送到顶端的启动类加载器;只有当父类加载器在其搜索范围内无法找到所需的类,并将该结果反馈给子类加载器,子类加载器会尝试去自己加载。</em>  </p>\n<p>   <img src=\"/2020/08/09/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.jpg\" alt=\"双亲委派图解\">  </p>\n<h2 id=\"打破双亲委派\"><a href=\"#打破双亲委派\" class=\"headerlink\" title=\"打破双亲委派\"></a>打破双亲委派</h2><p><em>因为在某些情况下父类加载器需要委托子类加载器去加载class文件。受到加载范围的限制，父类加载器无法加载到需要的文件，以Driver接口为例，由于Driver接口定义在jdk当中的，而其实现由各个数据库的服务商来提供，比如mysql的就写了MySQL Connector，那么问题就来了，DriverManager（也由jdk提供）要加载各个实现了Driver接口的实现类，然后进行管理，但是DriverManager由启动类加载器加载，只能加载JAVA_HOME的lib下文件，而其实现是由服务商提供的，由系统类加载器加载，这个时候就需要启动类加载器来委托子类来加载Driver实现，从而破坏了双亲委派。<br>类似这样的情况就需要打破双亲委派。打破双亲委派的意思其实就是不委派、向下委派</em></p>\n<ul>\n<li>方式</li>\n</ul>\n<ol>\n<li>自定义类加载器<br> <em>1.4 中代码有提及</em></li>\n<li>SPI<br> <em>是一种服务发现机制。它通过在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。这一机制为很多框架扩展提供了可能，比如在Dubbo、JDBC中都使用到了SPI机制</em></li>\n</ol>\n<h2 id=\"线程上下文类加载器\"><a href=\"#线程上下文类加载器\" class=\"headerlink\" title=\"线程上下文类加载器\"></a>线程上下文类加载器</h2><ol>\n<li>是什么<br><em>一种特殊的类加载器，可以通过Thread获取，基于此可实现逆向委托加载</em></li>\n<li>存在的理由<br><em>为了解决双亲委派的缺陷而生</em></li>\n<li>如何使用</li>\n</ol>\n<pre><code>//获取\nThread.currentThread().getContextClassLoader()\n//设置\nThread.currentThread().setContextClassLoader(new Classloader_4());   </code></pre><h2 id=\"沙箱安全\"><a href=\"#沙箱安全\" class=\"headerlink\" title=\"沙箱安全\"></a>沙箱安全</h2><p>   <em>看openjdk源码会看到有这样的判断AccessController.doPrivileged.比如我定义了一个类名为String所在包为java.lang，因为这个类本来是属于jdk的，如果没有沙箱安全机制的话，这个类将会污染到我所有的String,但是由于沙箱安全机制，所以就委托顶层的bootstrap加载器查找这个类，如果没有的话就委托extsion,extsion没有就到aapclassloader，但是由于String就是jdk的源代码，所以在bootstrap那里就加载到了，先找到先使用，所以就使用bootstrap里面的String,后面的一概不能使用，这就保证了不被恶意代码污染.它的主要作用为保护核心类库</em></p>\n","categories":["java"],"tags":["JVM"]}]