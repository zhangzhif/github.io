[{"title":"大家好～","url":"/2020/03/02/introduce/","content":"<p>我就是江湖上人见人爱、花见花开、车见车载，人称上天入地、无所不能、英俊潇洒、风流倜傥、玉树临风、学富五车、高大威猛、阅代码无数、迷倒万千少女,号称一朵梨花压海棠的java程序猿，帅到掉榨!。来和我一起学习吧。</p>\n<h2 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h2><h3 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h3><h4 id=\"JVM线程模型\"><a href=\"#JVM线程模型\" class=\"headerlink\" title=\"JVM线程模型\"></a><a href=\"#/\">JVM线程模型</a></h4><h4 id=\"垃圾回收器\"><a href=\"#垃圾回收器\" class=\"headerlink\" title=\"垃圾回收器\"></a>垃圾回收器</h4><h4 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h4><h4 id=\"JVM类加载机制\"><a href=\"#JVM类加载机制\" class=\"headerlink\" title=\"JVM类加载机制\"></a>JVM类加载机制</h4><h4 id=\"JVM调优工具\"><a href=\"#JVM调优工具\" class=\"headerlink\" title=\"JVM调优工具\"></a>JVM调优工具</h4><h4 id=\"GC日志分析\"><a href=\"#GC日志分析\" class=\"headerlink\" title=\"GC日志分析\"></a>GC日志分析</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">学习使我快乐</span><br></pre></td></tr></table></figure>\n\n\n\n","tags":["随笔"]},{"title":"JVM虚拟机","url":"/2020/03/15/jvm/","content":"<p>java虚拟机(java virtual machine，JVM)，一种能够运行java字节码的虚拟机。作为一种编程语言的虚拟机，实际上不只是专用于Java语言，只要生成的编译文件匹配JVM对加载编译文件格式要求，任何语言都可以由JVM编译运行。比如kotlin、scala等。</p>\n<h2 id=\"JVM组成\"><a href=\"#JVM组成\" class=\"headerlink\" title=\"JVM组成\"></a>JVM组成</h2><p>JVM的主要由三部分组成</p>\n<ul>\n<li>类加载子系统</li>\n<li>运行时数据区（内存结构）</li>\n<li>执行引擎<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/jvm.jpg\" alt=\"jvm结构\" title>\n                </div>\n                <div class=\"image-caption\">jvm结构</div>\n            </figure>\n\n\n\n\n</li>\n</ul>\n<h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/lifecircle.jpg\" alt=\"生命周期\" title>\n                </div>\n                <div class=\"image-caption\">生命周期</div>\n            </figure>\n<ol>\n<li>加载<br> <em>将class文件读取到内存</em></li>\n<li>连接<br> 2.1 验证<br> <em>验证字节码文件的正确性</em><br> 2.2  准备<br> <em>给类的静态变量分配内存，并赋予默认值</em><br> 2.3 解析<br> <em>类装载器装入类所引用的其它所有类</em></li>\n<li>初始化<br> <em>为类的静态变量赋予正确的初始值，上述的准备阶段为静态变量赋予的是虚拟机默认的初始值，此处赋予的才是程序编写者为变量分配的真正的初始值，执行静态代码块</em></li>\n<li>使用</li>\n<li>卸载</li>\n</ol>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><ul>\n<li>启动类加载器(Bootstrap ClassLoader)<br>  <em>负责加载JRE的核心类库，如JRE目标下的rt.jar，charsets.jar等</em></li>\n<li>扩展类加载器(Extension ClassLoader)<br>  <em>负责加载JRE扩展目录ext中jar类包</em></li>\n<li>系统类加载器(Application ClassLoader)<br>  <em>负责加载ClassPath路径下的类包</em></li>\n<li>用户自定义加载器(User ClassLoader)<br>  <em>负责加载用户自定义路径下的类包</em><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2020/03/15/jvm/classLoader.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n\n</li>\n</ul>\n<h2 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h2><ol>\n<li>全盘负责委托机制<br> <em>当一个ClassLoader加载一个类的时候，除非显示的使用另一个ClassLoader，该类所依赖和引用的类也由这个ClassLoader载入</em></li>\n<li>双亲委派机制<br> <em>指先委托父类加载器寻找目标类，在找不到的情况下才会到自己的路径中查找并载入目标类</em><br>双亲委派的优势<ul>\n<li><em>沙箱安全机制：比如自己写的String.class类不会被加载，这样可以防止核心库被随意篡改</em></li>\n<li><em>避免类的重复加载：当父ClassLoader已经加载了该类的时候，就不需要子ClassLoader再加载一次</em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"运行时数据区\"><a href=\"#运行时数据区\" class=\"headerlink\" title=\"运行时数据区\"></a>运行时数据区</h2><ol>\n<li><p>方法区（Method Area）<br> <em>类的所有字段和方法字节码，以及一些特殊方法如构造函数，接口代码也在这里定义。简单来说，所有定义的方法的信息都保存在该区域，静态变量+常量+类信息（构造方法/接口定义）+运行时常量池都存在方法区中，虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是为了和Java的堆区分开(jdk1.8以前hotspot虚拟机叫永久代、持久代，jdk1.8时叫元空间)</em></p>\n</li>\n<li><p>堆（Heap）<br> <em>虚拟机启动时自动分配创建，用于存放对象的实例，几乎所有对象都在堆上分配内存，当对象无法在该空间申请到内存是将抛出OutOfMemoryError异常。同时也是垃圾收集器管理的主要区域。</em></p>\n<p> 2.1 新生代<br> <em>类出生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。新生代分为两部分：伊甸区（Eden space）和幸存者区（Survivor space），所有的类都是在伊甸区被new出来的。幸存区又分为From和To区。当Eden区的空间用完是，程序又需要创建对象，JVM的垃圾回收器将Eden区进行垃圾回收（Minor GC），将Eden区中的不再被其它对象应用的对象进行销毁。然后将Eden区中剩余的对象移到From Survivor区。若From Survivor区也满了，再对该区进行垃圾回收，然后移动到To Survivor区。</em><br> 2.2 老年代<br> <em>新生代经过多次GC仍然存货的对象移动到老年区。若老年代也满了，这时候将发生Major GC（也可以叫Full GC），进行老年区的内存清理。若老年区执行了Full GC之后发现依然无法进行对象的保存，就会抛出OOM（OutOfMemoryError）异常</em><br> 2.3 元空间<br> <em>在JDK1.8之后，元空间替代了永久代，它是对JVM规范中方法区的实现，区别在于元数据区不在虚拟机当中，而是用的本地内存，永久代在虚拟机当中，永久代逻辑结构上也属于堆，但是物理上不属于。</em></p>\n</li>\n<li><p>栈 (Stack)<br> <em>Java线程执行方法的内存模型，一个线程对应一个栈，每个方法在执行的同时都会创建一个栈帧（用于存储局部变量表，操作数栈，动态链接，方法出口等信息）不存在垃圾回收问题，只要线程一结束该栈就释放，生命周期和线程一致</em></p>\n</li>\n<li><p>本地方法栈 (Native Method Stack)<br> <em>类似栈，java栈服务于java方法，而本地方法栈服务于native方法。</em></p>\n</li>\n<li><p>程序计数器 (Program Counter Register)<br> <em>就是一个指针，指向下一跳指令的地址，就是即将要执行的指令，由执行引擎进行读取，所占的内存空间很小，几乎可以忽略不计</em></p>\n</li>\n</ol>\n","categories":["java"],"tags":["jdk","java"]},{"title":"synchronized锁状态及性能对比","url":"/2020/04/01/synchronized/","content":"<h2 id=\"锁状态\"><a href=\"#锁状态\" class=\"headerlink\" title=\"锁状态\"></a>锁状态</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>无锁<br> <em>没有synchronized关键字修饰</em></li>\n<li>偏向锁<br>  <em>JVM开启偏向锁时只有单个线程调用同步代码（不存在竞争条件）</em></li>\n<li>轻量级锁<br>  <em>多个线程调用同步代码，但是线程之间交替执行例如调用join().-自旋锁也是产生轻量级锁的一个方式</em></li>\n<li>重量级锁<br>  <em>多个线程调用同步代码，且存在锁竞争</em></li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><h4 id=\"对象头介绍\"><a href=\"#对象头介绍\" class=\"headerlink\" title=\"对象头介绍\"></a>对象头介绍</h4><p>   <em>锁状态的标记就在对象头当中。网上32位操作系统对象头的文档很多，下面使用的是64位操作系统介绍</em></p>\n<h5 id=\"对象头的组成-mark-Word\"><a href=\"#对象头的组成-mark-Word\" class=\"headerlink\" title=\"对象头的组成-mark Word\"></a>对象头的组成-mark Word</h5><p><em>这部分主要用来存储对象自身的运行时数据，如hashcode、gc分代年龄等，32位操作系统和64位操作系统的位长度是不一样的，具体看图:</em></p>\n<pre><code>                             32位操作系统\n|------------------------------------------------|-------------------| \n|                  Mark Word (32 bits)           |       State       |\n|------------------------------------------------|-------------------|\n| identity_hashcode:25|age:4|biased_lock:1|lock:2|       Normal      |\n|------------------------------------------------|-------------------|\n| thread:23 | epoch:2|age:4|biased_lock:1 |lock:2|       Biased      |\n|------------------------------------------------|-------------------|\n|           ptr_to_lock_record:30         |lock:2|Lightweight Locked |\n|------------------------------------------------|-------------------|\n|       ptr_to_heavyweight_monitor:30     |lock:2| Heavyweight Locked|\n|------------------------------------------------|-------------------|\n|                                         |lock:2|    Marked for GC  |\n|------------------------------------------------|-------------------|</code></pre><hr>\n<pre><code>                                    64位操作系统   \n|-------------------------------------------------------------------|-------------------|\n|                  Mark Word (64 bits)                              |       State       |\n|-------------------------------------------------------------------|-------------------|\n| unused:25|identity_hashcode:31|unused:1|age:4|biased_lock:1|lock:2|       Normal      |\n|------------------------------------------------------------|------|-------------------|\n| thread:54|     epoch:2        |unused:1|age:4|biased_lock:1|lock:2|       Biased      |\n|------------------------------------------------------------|------|-------------------|\n|                           ptr_to_lock_record:62            |lock:2|Lightweight Locked |\n|----------------------------------------------------------- |------|-------------------|\n|                        ptr_to_heavyweight_monitor:62       |lock:2| Heavyweight Locked|\n|------------------------------------------------------------|------|-------------------|\n|                                                            |lock:2|    Marked for GC  |\n|---------------------------------------------------------------------------------------|</code></pre><h4 id=\"JOL工具\"><a href=\"#JOL工具\" class=\"headerlink\" title=\"JOL工具\"></a>JOL工具</h4><p>   JOL全称为Java Object Layout，是分析JVM中对象布局的工具，该工具大量使用了Unsafe、JVMTI来解码布局情况，分析结果是比较精准。使用时直接引入maven依赖即可</p>\n<pre><code>&lt;!--java状态分析工具--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;\n    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;\n    &lt;version&gt;0.9&lt;/version&gt;\n&lt;/dependency&gt;</code></pre><h4 id=\"偏向锁代码\"><a href=\"#偏向锁代码\" class=\"headerlink\" title=\"偏向锁代码\"></a>偏向锁代码</h4><pre><code>- JVM偏向锁延迟： JVM启动有大量的同步操作，偏向锁的锁消除性能很差所以JVM启动时会延迟偏向锁的启用。\n- 对象进行hashcode以后 就不存在偏向锁 这和对象头的设计有关\n- 偏向锁开启后新建对象 会有一个可偏向状态 但是指向的线程号为空 体现为二机制 0\n\n/**\n * 由于在jvm启动时会延迟开启偏向锁 所以使用Thread.sleep(5000)\n * 设置JVM启动参数 -XX:BiasedLockingStartupDelay=0 延迟偏向锁时间0\n */\npublic class Demo1 {\n    public static void main(String[] args) throws InterruptedException {\n        //睡眠5秒 使得偏向锁开启 也可以设置启动参数 \n        //-XX:BiasedLockingStartupDelay=0 延迟偏向锁时间0\n        Thread.sleep(5000);\n        A a = new A();\n        System.out.println(&quot;锁之前&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n        Thread thread = new Thread(){\n            @Override\n            public void run() {\n                synchronized (a){\n                    System.out.println(&quot;锁状态&quot;);\n                    System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                }\n            }\n        };\n        thread.start();\n        System.out.println(&quot;锁之后&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n    }\n}\n\n\n\n结果\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 d0 11 1b (00000101 11010000 00010001 00011011) (454152197)\n      4     4        (object header)                           e6 7f 00 00 (11100110 01111111 00000000 00000000) (32742)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 d0 11 1b (00000101 11010000 00010001 00011011) (454152197)\n      4     4        (object header)                           e6 7f 00 00 (11100110 01111111 00000000 00000000) (32742)\n      8     4        (object header)                           a0 c1 00 f8 (10100000 11000001 00000000 11111000) (-134168160)\n结果分别为 101+0 偏向锁状态 101+pid 偏向锁 101+pid偏向锁，后面两次打印结果中可以看到锁指向线程id是相同。 </code></pre><h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><pre><code>public class Demo2 {\n\n    //JVM启动设置关闭偏向锁延迟\n    public static void main(String[] args) throws InterruptedException {\n\n        A a = new A();\n        System.out.println(&quot;锁之前&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n        Thread thread = new Thread(){\n            @Override\n            public void run() {\n                synchronized (a){\n                    System.out.println(&quot;线程锁状态&quot;);\n                    System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                }\n            }\n        };\n\n        /**\n         * 主线程先拿锁 执行完成启动第二个线程 否则会产出重量级锁\n         */\n        synchronized (a){\n            System.out.println(&quot;主线程锁状态&quot;);\n            System.out.println(ClassLayout.parseInstance(a).toPrintable());\n        }\n\n        thread.start();\n\n        System.out.println(&quot;锁之后&quot;);\n        System.out.println(ClassLayout.parseInstance(a).toPrintable());\n    }\n}\n\n结果\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n主线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 18 00 7a (00000101 00011000 00000000 01111010) (2046826501)\n      4     4        (object header)                           8d 7f 00 00 (10001101 01111111 00000000 00000000) (32653)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\n线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           f8 c8 12 0f (11111000 11001000 00010010 00001111) (252889336)\n      4     4        (object header)                           00 70 00 00 (00000000 01110000 00000000 00000000) (28672)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           f8 c8 12 0f (11111000 11001000 00010010 00001111) (252889336)\n      4     4        (object header)                           00 70 00 00 (00000000 01110000 00000000 00000000) (28672)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\n结果分别为 101+0 偏向锁状态 101+pid 偏向锁 000 轻量级锁 000 轻量级锁</code></pre><h4 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h4><pre><code>/**\n * 代码与轻量级锁的代码区别为thread.start()方法调用放到主线程加锁之前 使多个线程之间存在锁竞争\n *（自选状态之外）升级重量级锁\n */\n public class Demo3 {\n\n     //JVM启动设置关闭偏向锁延迟\n     public static void main(String[] args) throws InterruptedException {\n\n         A a = new A();\n         System.out.println(&quot;锁之前&quot;);\n         System.out.println(ClassLayout.parseInstance(a).toPrintable());\n\n         Thread thread = new Thread(){\n             @Override\n             public void run() {\n                 synchronized (a){\n                     System.out.println(&quot;线程锁状态&quot;);\n                     System.out.println(ClassLayout.parseInstance(a).toPrintable());\n                 }\n             }\n         };\n\n         thread.start();\n         /**\n          * 主线程先拿锁 执行完成启动第二个线程 否则会产出重量级锁\n          */\n         synchronized (a){\n             System.out.println(&quot;主线程锁状态&quot;);\n             System.out.println(ClassLayout.parseInstance(a).toPrintable());\n         }\n\n\n\n         System.out.println(&quot;锁之后&quot;);\n         System.out.println(ClassLayout.parseInstance(a).toPrintable());\n     }\n }\n结果：\n锁之前\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n主线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n锁之后\n线程锁状态\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\ncom.example.concurrent.sync.A object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           5a 57 00 50 (01011010 01010111 00000000 01010000) (1342199642)\n      4     4        (object header)                           a8 7f 00 00 (10101000 01111111 00000000 00000000) (32680)\n      8     4        (object header)                           05 c4 00 f8 (00000101 11000100 00000000 11111000) (-134167547)\n     12     4        (loss due to the next object alignment)\n\n 结果分别为001 无锁 010 重量级锁 010重量级锁 010 重量级锁 （锁只会进行升级和锁释放，不会降级）</code></pre><h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><h3 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h3><pre><code>//JVM启动设置关闭偏向锁延迟 -XX:BiasedLockingStartupDelay=0\npublic class Demo4 {\n    public Long max = 1000000000L;\n\n    public static void main(String[] args) throws InterruptedException {\n        Demo4 demo4 = new Demo4();\n        long start = System.currentTimeMillis();\n        while (demo4.max&gt;0){\n            demo4.run1();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(String.format(&quot;%sms&quot;, end -start));\n    }\n    public synchronized void run1(){\n\n       max--;\n    }\n}\n执行结果 4294ms</code></pre><h3 id=\"轻量级锁-1\"><a href=\"#轻量级锁-1\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h3><pre><code>代码同上 将偏向锁延迟开启即可\n结果  19682ms</code></pre><h3 id=\"重量级锁-1\"><a href=\"#重量级锁-1\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h3><pre><code> public class Demo5 {\n     public CountDownLatch countDownLatch = new CountDownLatch(1000000000);\n     public static void main(String[] args) throws InterruptedException {\n         Demo5 demo4 = new Demo5();\n         long start = System.currentTimeMillis();\n         for (int i=0;i&lt;2;i++){\n             Thread thread = new Thread(){\n                 @Override\n                 public void run() {\n                     while (demo4.countDownLatch.getCount()&gt;0){\n                         demo4.run1();\n                     }\n                 };\n             };\n             thread.start();\n         }\n         demo4.countDownLatch.await();\n         long end = System.currentTimeMillis();\n         System.out.println(String.format(&quot;%sms&quot;, end -start));\n     }\n     public synchronized void run1(){\n\n         countDownLatch.countDown();\n     }\n }\n结果:44597ms</code></pre><p><em>对象头的介绍在下次具体介绍推荐直接到oracle官网查看介绍</em></p>\n","categories":["java"],"tags":["java","并发"]}]